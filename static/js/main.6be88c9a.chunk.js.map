{"version":3,"sources":["components/DisplayTeam.tsx","components/YearSelection/YearSelection.js","hooks/useQueryYear.js","contexts/queryYearContext.js","containers/Main.tsx","components/DisplayGame.js","containers/GameDetails.js","containers/GamesContainer.js","components/Redux/Button.js","components/Redux/Output.js","components/Redux/GamesForm.js","App2.js","action.js","components/Redux/App2.js","reducers/DateReducer.js","reducers/RootReducer.js","reducers/FranchiseReducer.js","reducers/GamesReducer.js","App.js","index.js"],"names":["DisplayTeam","team","wins","losses","pct","gamesBack","streak","toFixed","YearSelection","queryYear","setQueryYear","date","Date","id","htmlFor","type","defaultValue","min","Number","value","max","getFullYear","onChange","e","target","useQueryYear","React","useState","Year","YearContext","createContext","displayName","useQueryYearContext","context","useContext","undefined","Error","QueryYearContext","children","console","log","values","useMemo","Provider","Wrapper","styled","div","Main","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","mapTeamState","state","league","map","item","teamId","props","record","prevState","reorganizeWins","sort","a","b","reverse","reorganizeLosses","reorganizeWinPercentage","reorganizeGamesBack","reorganizeAlpha","localeCompare","useEffect","results","controller","AbortController","axios","get","signal","response","status","data","resultsAmerican","slice","resultsNational","fetchTeams","abort","style","marginTop","color","height","colSpan","onClick","CompletedGames","split","formatDate","rest","className","stadium","to","join","concat","winner","loser","winnerRuns","loserRuns","GameDetails","useParams","game","setGame","db","fetchData","textAlign","JSON","stringify","GamesContainer","completeGameRecap","setCompleteGameRecap","legend","setLegend","pageNumber","setPageNumber","maxPages","useRef","fetch","method","then","res","json","result","index","key","name","runs","_id","current","pages","Array","from","tempData","filter","toLowerCase","includes","placeholder","DisplayGame","Button","handleEvent","Output","GamesForm","Games","i","Index","required","list","setWinnerInfo","hidden","Teams","setLoserInfo","setWinnerRuns","setLoserRuns","venue","setVenue","removeGame","swapMatchup","connect","MLBTeams","FranchiseReducer","GamesReducer","DateReducer","dispatch","addFranchise","arr","payload","addGame","obj","SET_VENUE","setDate","SET_DATE","getGames","displayOutput","setDisplayOutput","file","setFile","csvArray","setCsvArray","csvFile","reader","FileReader","onload","text","readAsText","readFile","length","test","trimStart","trimEnd","initTeamState","year","accept","files","toISOString","onFocus","currentTarget","onBlur","preventDefault","handleDate","opponent","isMatchInterLeague","division","matchUpFunc","printInterLeagueValue","printDivisionRivalValue","defaultDate","rootReducer","combineReducers","action","games","copy1","copy2","tempHolder","Object","assign","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","exact","path","App2","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6be88c9a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {FranchiseInfo} from '../containers/Main'\r\n\r\nfunction DisplayTeam({team, wins, losses, pct, gamesBack, streak}: FranchiseInfo){\r\n\r\n    return (\r\n        <tr>\r\n            <td>{team}</td>\r\n            <td>{wins}</td>\r\n            <td>{losses}</td>\r\n            <td>{pct.toFixed(3)}</td>\r\n            <td>{gamesBack < 0.5 ? '-' : gamesBack.toFixed(1) }</td>\r\n            <td>{streak}</td>\r\n        </tr>\r\n        )\r\n}\r\n\r\nexport default DisplayTeam;","import React from \"react\";\r\nimport './YearSelection.css'\r\n\r\nexport default function YearSelection({queryYear, setQueryYear}) {\r\n  let date = new Date();\r\n  return (\r\n    <div id=\"year-input\">\r\n      <label htmlFor=\"year-input\">Select year</label>\r\n      <input\r\n        type=\"date\"\r\n        data-testid=\"year-select\"\r\n        defaultValue={queryYear}\r\n        min={Number(2021)}\r\n        value={queryYear}\r\n        max={Number(date.getFullYear())}\r\n        onChange={(e) => setQueryYear(e.target.value)}\r\n      ></input>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\n\r\nconst useQueryYear = () => {\r\n    const [Year, setQueryYear] = React.useState(2022)\r\n    return {\r\n        Year,\r\n        setQueryYear\r\n    }\r\n} \r\n\r\nexport default useQueryYear","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { useQueryYear } from \"../hooks\";\r\n\r\nconst YearContext = React.createContext()\r\nYearContext.displayName = \"Year context\"\r\nexport const useQueryYearContext = () => {\r\n    const context = useContext(YearContext)\r\n    if (context === undefined) {\r\n        throw new Error('QueryYearContext must be used within a QueryYearContext Provider')\r\n    }\r\n\r\n    return context\r\n}\r\n\r\n\r\nconst QueryYearContext = ({ children }) => {\r\n    const { Year, setQueryYear } = useQueryYear()\r\n    console.log(Year)\r\n    const values = React.useMemo(() => {\r\n        return {Year, setQueryYear}\r\n    }, [Year, setQueryYear])\r\n\r\n    return <YearContext.Provider value={values}>{children}</YearContext.Provider>\r\n}\r\n\r\nexport default QueryYearContext","import React,{useState, useEffect} from 'react';\r\nimport DisplayTeam from '../components/DisplayTeam';\r\nimport { AiFillCaretUp, AiFillCaretDown} from \"react-icons/ai\";\r\nimport Loader from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\nimport YearSelection from '../components/YearSelection/YearSelection';\r\nimport { useQueryYearContext } from '../contexts/queryYearContext';\r\nimport axios from 'axios'\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 0 auto;\r\n    padding-top: 1%;\r\n    padding-bottom: 1%;\r\n\r\n    & table {\r\n        margin-top: 0px;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    & table:nth-child(2) {\r\n        margin-top: 1%;\r\n    }\r\n\r\n    & table > thead > tr > th {\r\n        background-color: #bf0d3e;\r\n        color: white;\r\n        padding-left: 25px;\r\n    }\r\n\r\n    & table:nth-child(2) > thead > tr > th {\r\n        background-color: #041e42;\r\n    }\r\n`\r\n\r\nexport interface FranchiseInfo {\r\n    division?: string,\r\n    gamesBack: number,\r\n    league: number,\r\n    losses: number,\r\n    pct: number,\r\n    record: string,\r\n    season?: number,\r\n    streak?: string,\r\n    team: string,\r\n    teamId: number,\r\n    wins: number,\r\n    _id?: string\r\n}\r\n\r\nfunction Main() {\r\n    const [teams, setTeams] = useState({\r\n        american: [],\r\n        national: []\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        }\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    const { Year } = useQueryYearContext()\r\n    console.log(Year)\r\n    const [queryYear, setQueryYear] = useState(Year)\r\n    useEffect( () => {\r\n        let results\r\n        const controller = new AbortController()\r\n\r\n        /* `https://api-mlb.herokuapp.com/` */\r\n        // fetch(`https://api-mlb.herokuapp.com/?season=${queryYear}`, { \r\n        //     method: 'GET'\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => {\r\n        //     console.log(data)\r\n        //     results = data.map(  (item) =>\r\n        //         <DisplayTeam\r\n        //             key = {item.teamId}\r\n        //             teamId = {item.teamId}\r\n        //             team = {item.team}\r\n        //             league = {item.league}\r\n        //             record = {item.record}\r\n        //             wins = {item.wins}\r\n        //             losses = {item.losses}\r\n        //             pct = {item.pct}\r\n        //             gamesBack = {item.gamesBack}\r\n        //             streak = {item.streak}\r\n        //         />)\r\n        //     results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n        //     let resultsAmerican = results.slice(0, 15)\r\n        //     let resultsNational = results.slice(-15)\r\n        //     setTeams({\r\n        //         american: resultsAmerican,\r\n        //         national: resultsNational\r\n        //     })\r\n        //     setLoading(false)\r\n        // })\r\n        // .catch(err => {\r\n        //     if (err){\r\n        //         setLoading(false)\r\n        //     }\r\n        // })\r\n\r\n        const fetchTeams = async () => {\r\n            setLoading(true)\r\n            const response = await axios.get(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n                signal: controller.signal\r\n            })\r\n            if (response.status === 200) {\r\n                results = response.data.map( (item:FranchiseInfo) => (\r\n                    <DisplayTeam\r\n                        key={item.teamId}\r\n                        teamId={item.teamId}\r\n                        team={item.team}\r\n                        league={item.league}\r\n                        record={item.record}\r\n                        wins={item.wins}\r\n                        losses={item.losses}\r\n                        pct={item.pct}\r\n                        gamesBack={item.gamesBack}\r\n                        streak={item.streak}\r\n                    />\r\n                ))\r\n                results = results.sort((a, b) => {\r\n                    return a.props.league - b.props.league\r\n                })\r\n                let resultsAmerican = results.slice(0, 15)\r\n                let resultsNational = results.slice(-15)\r\n                setTeams({\r\n                    american: resultsAmerican,\r\n                    national: resultsNational\r\n                })\r\n                setLoading(false)\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchTeams()\r\n\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [queryYear])\r\n\r\n    function mapTeamState(state, league) {\r\n        state = state.map(item => (\r\n            <DisplayTeam\r\n                key={item.props.teamId}\r\n                teamId={item.props.teamId}\r\n                team={item.props.team}\r\n                league={item.props.league}\r\n                record={item.props.record}\r\n                wins={item.props.wins}\r\n                losses={item.props.losses}\r\n                pct={item.props.pct}\r\n                gamesBack={item.props.gamesBack}\r\n                streak={item.props.streak}\r\n            />\r\n        ))\r\n        if (league === 'american') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if (league === 'national') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reorganizeWins handles sorting for # of wins and win percentage,\r\n     * because they are closely related. Also sorting wins in descending order\r\n     * will toggle the state for # of losses to display in ascending order.\r\n     * @param {*} league -- string for either american or national league\r\n     */\r\n    function reorganizeWins(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.wins - a.props.wins\r\n        })\r\n        if (!sortDirection[`${league}`].wins) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                wins: !prevState[`${league}`].wins,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeLosses(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.losses - a.props.losses\r\n        })\r\n        if (!sortDirection[`${league}`].losses) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                losses: !prevState[`${league}`].losses,\r\n                wins: prevState[`${league}`].losses,\r\n                pct: prevState[`${league}`].losses\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeWinPercentage(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.pct - a.props.pct\r\n        })\r\n        if (!sortDirection[`${league}`].pct) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                pct: !prevState[`${league}`].pct,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeGamesBack(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.gamesBack - a.props.gamesBack\r\n        })\r\n        if (!sortDirection[`${league}`].gamesBack) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                gamesBack: !prevState[`${league}`].gamesBack,\r\n                wins: prevState[`${league}`].gamesBack,\r\n                pct: prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeAlpha(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            if (sortDirection[`${league}`].team) {\r\n                return a.props.team.localeCompare(b.props.team)\r\n            } else {\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                team: !prevState[`${league}`].team\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            {loading ? (\r\n                <div style={{ marginTop: '5%' }}>\r\n                    {' '}\r\n                    Loading <Loader color={'black'} height={60} type={'Audio'} />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <YearSelection setQueryYear={setQueryYear} queryYear={queryYear}/>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan={6}>American League</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Team\r\n                                    <button onClick={() => reorganizeAlpha('american')}>\r\n                                        {sortDirection.american.team ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}{' '}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Wins{' '}\r\n                                    <button onClick={() => reorganizeWins('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.wins ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Losses{' '}\r\n                                    <button onClick={() => reorganizeLosses('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.losses ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Win %{' '}\r\n                                    <button onClick={() => reorganizeWinPercentage('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.pct ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Games Back{' '}\r\n                                    <button onClick={() => reorganizeGamesBack('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.gamesBack ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>{' '}\r\n                                </td>\r\n                                <td>Streak</td>\r\n                            </tr>\r\n                            {teams.american}\r\n                        </tbody>\r\n                    </table>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan={6}>National League</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Team\r\n                                    <button onClick={() => reorganizeAlpha('national')}>\r\n                                        {sortDirection.national.team ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}{' '}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Wins{' '}\r\n                                    <button onClick={() => reorganizeWins('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.wins ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Losses{' '}\r\n                                    <button onClick={() => reorganizeLosses('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.losses ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Win %{' '}\r\n                                    <button onClick={() => reorganizeWinPercentage('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.pct ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Games Back{' '}\r\n                                    <button onClick={() => reorganizeGamesBack('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.gamesBack ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>{' '}\r\n                                </td>\r\n                                <td>Streak</td>\r\n                            </tr>\r\n                            {teams.national}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CompletedGames( {props} ){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <Link to={`/game/${props.id}`}><div className='date-link'> {rest.join('/').concat('/', formatDate)} </div></Link>\r\n            </div>\r\n            <div className = \"info-container\"> \r\n                <div className=\"left\"> {props.winner}</div>\r\n                <div> vs </div>\r\n                <div className=\"right\"> {props.loser}  </div> \r\n            </div>\r\n            <div className = \"info-container\">\r\n                <div className=\"left\"> {props.winnerRuns} </div> \r\n                <div> - </div>\r\n                <div className=\"right\"> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;\r\n\r\n/**/","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst GameDetails = () => {\r\n    const {id} = useParams()\r\n    const [game, setGame] = React.useState()\r\n    console.log(game)\r\n    React.useEffect(() => {\r\n        const fetchData = async () => {\r\n            console.log('asdfasdf')\r\n            const response = await axios.get( `http://localhost:8000/regular-season/gameId?game=${id}`)\r\n            setGame(response.data.db[0])\r\n\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <> \r\n            <pre style={{textAlign: \"left\"}}>{JSON.stringify(game, null, 5)}</pre>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameDetails","import React, { useState, useEffect, useRef } from 'react'\r\nimport DisplayGame from '../components/DisplayGame'\r\n// import { Page } from '../Shared/index';\r\n// import { Games } from '../components/index'\r\nimport { BrowserRouter as Router, Switch, Link, Route, useParams } from 'react-router-dom'\r\nimport YearSelection from '../components/YearSelection/YearSelection'\r\nimport GameDetails from './GameDetails'\r\n\r\nfunction GamesContainer() {\r\n    const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n    const [legend, setLegend] = useState()\r\n    const [pageNumber, setPageNumber] = useState(0)\r\n    const [queryYear, setQueryYear] = useState(2022)\r\n    let maxPages = useRef(null)\r\n    useEffect(() => {\r\n        let results = []\r\n        fetch(\r\n            `https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}&season=${queryYear}`,\r\n            {\r\n                method: 'GET'\r\n                //accept: \"*/*\"\r\n            }\r\n        )\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                results = data.result.map((item, index) => {\r\n                    return {\r\n                        key: index,\r\n                        date: item.date,\r\n                        stadium: item.stadium,\r\n                        winner: item.winner.name,\r\n                        winnerRuns: item.winner.runs,\r\n                        loser: item.loser.name,\r\n                        loserRuns: item.loser.runs,\r\n                        id: item._id\r\n                    }\r\n                })\r\n                maxPages.current = data.pages\r\n                setCompleteGameRecap(Array.from(results))\r\n                setLegend(Array.from(results))\r\n                setLoading(false)\r\n            })\r\n    }, [pageNumber, queryYear])\r\n\r\n    const handleSearch = e => {\r\n        if (e.target.value) {\r\n            let tempData = legend.filter(item => {\r\n                if (\r\n                    item.winner.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n                    item.loser.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n                    item.stadium.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n                    item.date.toLowerCase().includes(e.target.value.toLowerCase())\r\n                )\r\n                    return item\r\n                else return null\r\n            })\r\n            return setCompleteGameRecap(tempData)\r\n        }\r\n\r\n        return setCompleteGameRecap(legend)\r\n    }\r\n\r\n    return (\r\n        // <Page>\r\n        //     <Games />\r\n        // </Page>\r\n        <div>\r\n\r\n            {loading ? (\r\n                <div> loading </div>\r\n            ) : (\r\n                <div>\r\n                    <YearSelection queryYear={queryYear} setQueryYear={setQueryYear} />\r\n                    <input\r\n                        onChange={handleSearch}\r\n                        placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"\r\n                    />\r\n                    <div className=\"layout-container\">\r\n                        {completeGameRecap.map((item, index) => (\r\n                            <DisplayGame key={index} props={item} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"page-bar\">\r\n                        <button\r\n                            onClick={() =>\r\n                                pageNumber ? setPageNumber(prevState => prevState - 1) : 0\r\n                            }\r\n                        >\r\n                            {' '}\r\n                            <strong> Go back </strong>{' '}\r\n                        </button>\r\n                        <div className=\"page-number\">\r\n                            {' '}\r\n                            Page {pageNumber + 1} out of {maxPages.current + 1}{' '}\r\n                        </div>\r\n                        <button\r\n                            onClick={() =>\r\n                                pageNumber === maxPages.current\r\n                                    ? null\r\n                                    : setPageNumber(prevState => prevState + 1)\r\n                            }\r\n                        >\r\n                            {' '}\r\n                            <strong> Next page </strong>{' '}\r\n                        </button>\r\n                    </div>            \r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesContainer\r\n","import React from \"react\";\r\n\r\nexport const Button = (props) => {\r\n  return (\r\n    <button type=\"button\" onClick={() => props.handleEvent(props.index)}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Output= (props) => {\r\n    return(\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from './Button.js';\r\n\r\nfunction GamesForm(props){\r\n    /*\r\n    function handleWinner(e, i){\r\n        props.setWinnerInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleLoser(e, i){\r\n        props.setLoserInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleWinnerRuns(e, i){\r\n        props.setWinnerRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleLoserRuns(e, i){\r\n        props.setLoserRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleVenue(e, i){\r\n        props.setVenue(e.target.value, i)\r\n    }*/\r\n\r\n    return(\r\n        <div>\r\n            {props.Games.map( (i, Index) => {\r\n                return (\r\n                    <form key={Index}>\r\n                        <label> Winner \r\n                        <input required list =\"teams\" name=\"winner\" id =\"winner\" value={i.winner} onChange={(e) => props.setWinnerInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden value=\"\"></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Loser -\r\n                            <input list=\"teams\" name=\"loser\" id =\"loser\" value={i.loser} onChange={(e) => props.setLoserInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Score\r\n                            <input type=\"text\" value={i?.winnerRuns} onChange = {(e)=> props.setWinnerRuns(e.target.value, Index)}></input>\r\n                            -\r\n                            <input type=\"text\" value={i?.loserRuns} onChange = {(e)=> props.setLoserRuns(e.target.value, Index)}></input>\r\n                        </label>\r\n                        <label> Venue\r\n                            <select name = \"venue\" id =\"venue\" defaultValue={i?.venue} onChange = {(e)=> props.setVenue(e.target.value, Index)}>\r\n                                <option hidden></option>\r\n                                <option> American Family Field </option>\r\n                                <option> Angel Stadium </option>\r\n                                <option> Busch Stadium </option>\r\n                                <option> Camden Yards </option>\r\n                                <option> Chase Field </option>\r\n                                <option> Citi Field</option>\r\n                                <option> Citizens Bank Park</option>\r\n                                <option> Comerica Park</option>\r\n                                <option> Coors Field </option>\r\n                                <option> Dodger Stadium </option>\r\n                                <option> Fenway Park</option>\r\n                                <option> Globe Life Field</option>\r\n                                <option> Great American Ball Park</option>\r\n                                <option> Guaranteed Rate Field</option>\r\n                                <option> Kauffman Stadium</option>\r\n                                <option> loanDepot Park</option>\r\n                                <option> Minute Maid Park</option>\r\n                                <option> Nationals Park</option>\r\n                                <option> Oakland Coliseum</option>\r\n                                <option> Oracle Park</option>\r\n                                <option> Petco Park</option>\r\n                                <option> PNC Park</option>\r\n                                <option> Progressive Field</option>\r\n                                <option> Rogers Centre</option>\r\n                                <option> T-Mobile Park</option>\r\n                                <option> Target Field</option>\r\n                                <option> Tropicana Field</option>\r\n                                <option> Truist Park</option>\r\n                                <option> Wrigley Field</option>\r\n                                <option> Yankee Stadium</option>\r\n                            </select>\r\n                        </label>\r\n                        <Button handleEvent={i => props.removeGame(i)} index={Index}> Remove </Button>\r\n                        <Button handleEvent={i => props.swapMatchup(i)} index={Index}> Swap </Button>\r\n                    </form>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesForm;","import {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES} from './action.js'\r\nimport {connect} from 'react-redux'\r\nimport App2 from './components/Redux/App2';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    MLBTeams: state.FranchiseReducer,\r\n    Games: state.GamesReducer,\r\n    Date: state.DateReducer.date\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFranchise: (arr) => dispatch(ADD_FRANCHISE(arr)),\r\n    addGame: () => dispatch(ADD_GAME()),\r\n    removeGame: (index) => dispatch(REMOVE_GAME(index)),\r\n    swapMatchup: (index) => dispatch(SWAP_MATCHUP(index)),\r\n    setWinnerInfo: (obj, index) => dispatch(SET_WINNER_INFO(obj, index)),\r\n    setLoserInfo: (obj, index) => dispatch(SET_LOSER_INFO(obj, index)),\r\n    setWinnerRuns: (obj, index) => dispatch(SET_WINNER_RUNS(obj, index)),    \r\n    setLoserRuns: (obj, index) => dispatch(SET_LOSER_RUNS(obj, index)),\r\n    setVenue: (venue, index) => dispatch(SET_VENUE(venue, index)),\r\n    setDate: (Date) => dispatch(SET_DATE(Date)),\r\n    getGames: () => dispatch(GET_GAMES())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App2);","const ADD_FRANCHISE = (obj) => {\r\n    return {\r\n        type: 'ADD_FRANCHISE',\r\n        payload: obj\r\n    }\r\n}\r\n\r\nconst ADD_GAME = () => {\r\n    return {\r\n        type: 'ADD_GAME',\r\n        payload: {\r\n            winner: '',\r\n            loser: '',\r\n            winnerRuns: null,\r\n            loserRuns: null,\r\n            venue: ''\r\n        }\r\n    }\r\n}\r\n\r\nconst REMOVE_GAME = (i) => {\r\n    return {\r\n        type: 'REMOVE_GAME',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SWAP_MATCHUP = (i) => {\r\n    return {\r\n        type: 'SWAP_MATCHUP',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_INFO = (winner, i) => {\r\n    console.log(winner, i)\r\n    return {\r\n        type: 'SET_WINNER_INFO',\r\n        payload: winner,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_INFO = (loser, i) => {\r\n    return {\r\n        type: 'SET_LOSER_INFO',\r\n        payload: loser,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_WINNER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_LOSER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_VENUE = (venue, i) => {\r\n    return {\r\n        type: 'SET_VENUE',\r\n        payload: venue,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_DATE = (Date) => {\r\n    return{\r\n        type: 'SET_DATE',\r\n        payload: Date\r\n    }\r\n}\r\n\r\nconst GET_GAMES = () => {\r\n    return {\r\n        type: 'GET_GAMES'\r\n    }\r\n}\r\n\r\nexport {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES};","import React, { useEffect, useState } from 'react'\r\nimport { Button } from './Button'\r\nimport { Output } from './Output'\r\nimport GamesForm from './GamesForm.js'\r\n//import \"../App.css\";\r\n\r\nexport default function App(props) {\r\n    let [displayOutput, setDisplayOutput] = useState(false)\r\n    const [file, setFile] = useState()\r\n    const [csvArray, setCsvArray] = useState()\r\n\r\n    console.log(file)\r\n\r\n    useEffect(() => {\r\n      console.log('asdf')\r\n      const readFile = () => {\r\n        const csvFile = file\r\n        const reader = new FileReader()\r\n\r\n            reader.onload = function(e){\r\n                const text = e.target.result\r\n               // console.log(text)\r\n                setCsvArray(text)\r\n\r\n               \r\n            }\r\n          reader.readAsText(csvFile)\r\n      }\r\n      if(file && file.name !== null)\r\n        readFile()\r\n\r\n    }, [file])\r\n    console.log(props)\r\n    useEffect(() => {\r\n      const populateInput = () => {\r\n        const input = csvArray.split('\\n')\r\n        input.map( (item, index) => {\r\n          props.addGame()\r\n          console.log(index)\r\n          const info = item.split(' vs ').join(', ')\r\n          const test = info.split(',')\r\n\r\n            props.setWinnerInfo(test[0], index)\r\n            props.setLoserInfo(test[1].trimStart().trimEnd(), index)\r\n            props.setVenue(test[2].trimStart().trimEnd(), index)\r\n            props.setWinnerRuns(Number(test[4]), index)\r\n            props.setLoserRuns(Number(test[5]), index)\r\n\r\n        })\r\n      }\r\n\r\n      if(csvArray && csvArray.length !== 0)\r\n        populateInput()\r\n    }, [csvArray])\r\n\r\n    let initTeamState = props.addFranchise\r\n    useEffect(() => {\r\n        fetch(`https://api-mlb.herokuapp.com?season=2022`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                initTeamState(data)\r\n            })\r\n    }, [])\r\n\r\n    function handleDate(e) {\r\n        e.preventDefault()\r\n        props.setDate(e.target.value)\r\n    }\r\n\r\n    function formatDate() {\r\n        let [year, ...date] = props.Date.split('-')\r\n        date = date.join('-')\r\n        date = [date, '-', ...year].join('')\r\n        return date\r\n    }\r\n\r\n    let matchUpFunc = function (winner, loser) {\r\n        let opponent = 1\r\n        let isMatchInterLeague = (function () {\r\n            opponent = props.MLBTeams.filter(item => {\r\n                return item.team === winner || item.team === loser ? item : null\r\n            })\r\n            return checkLeague(opponent[0].league, opponent[1].league)\r\n        })()\r\n\r\n        function checkLeague(a, b) {\r\n            return a === b ? 0 : 1\r\n        }\r\n\r\n        function checkDivisionString(a, b) {\r\n            return a === b ? 1 : 0\r\n        }\r\n\r\n        function checkDivisionRivals() {\r\n            if (!isMatchInterLeague)\r\n                return checkDivisionString(opponent[0].division, opponent[1].division)\r\n            return 0\r\n        }\r\n\r\n        return [isMatchInterLeague, checkDivisionRivals]\r\n    }\r\n\r\n    function generateOutput() {\r\n        let output = props.Games.map((item, i) => {\r\n            if (item.winner === '' || item.loser === '') return null\r\n\r\n            let [printInterLeagueValue, printDivisionRivalValue] = matchUpFunc(\r\n                item.winner,\r\n                item.loser\r\n            )\r\n\r\n            return (\r\n                <Output key={i}>\r\n                    {item.winner} vs {item.loser}, {item.venue}, {formatDate()},&nbsp;\r\n                    {item.winnerRuns}, {item.loserRuns}, 0, {printDivisionRivalValue()},&nbsp;\r\n                    {printInterLeagueValue},\r\n                </Output>\r\n            )\r\n        })\r\n\r\n        return output\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                type=\"file\"\r\n                placeholder={'import'}\r\n                accept=\".csv\"\r\n                onChange={e => setFile(e.target.files[0])}\r\n            />\r\n            <input\r\n                required\r\n                type=\"text\"\r\n                placeholder={new Date().toISOString().split('T')[0]}\r\n                onFocus={e => (e.currentTarget.type = 'date')}\r\n                onBlur={e => (e.currentTarget.type = 'text')}\r\n                onChange={e => handleDate(e)}\r\n            ></input>\r\n            {props.Games.length === 0 ? (\r\n                <div> No game data </div>\r\n            ) : (\r\n                <GamesForm\r\n                    Games={props.Games}\r\n                    Teams={props.MLBTeams}\r\n                    setWinnerInfo={props.setWinnerInfo}\r\n                    setLoserInfo={props.setLoserInfo}\r\n                    setWinnerRuns={props.setWinnerRuns}\r\n                    setLoserRuns={props.setLoserRuns}\r\n                    setVenue={props.setVenue}\r\n                    removeGame={props.removeGame}\r\n                    swapMatchup={props.swapMatchup}\r\n                />\r\n            )}\r\n            <Button handleEvent={props.addGame}> Enter another game </Button>\r\n            <Button handleEvent={() => setDisplayOutput(!displayOutput)}>Toggle output</Button>\r\n            {displayOutput ? generateOutput() : () => props.getGames}\r\n        </div>\r\n    )\r\n}\r\n/*\r\n * let myvar = new Date()\r\n    console.log myvar\r\n    outputs: Fri Nov 05 2021 00:46:17 GMT-0400 (Eastern Daylight Time)\r\n\r\n    Date.parse(myvar)\r\n    outputs: 1636087577000\r\n\r\n    let holdms = Date.parse(myvar)\r\n\r\n    let correctedDate = holdms - (60000* myvar.getTimezoneOffset())\r\n\r\n    correctedDate = new Date(correctedDate)\r\n    outputs: Thu Nov 04 2021 20:46:17 GMT-0400 (Eastern Daylight Time)\r\n */\r\n","const defaultDate = new Date()\r\n\r\nexport const DateReducer = (state= {date: defaultDate.toISOString().split('T')[0]}, action) => {\r\n  switch(action.type){\r\n    case 'SET_DATE':\r\n      return Object.assign({}, {date: action.payload});\r\n    default: \r\n      return state;\r\n  }\r\n}","import {DateReducer} from './DateReducer.js' \r\nimport {GamesReducer} from './GamesReducer.js' \r\nimport {FranchiseReducer} from './FranchiseReducer.js' \r\nimport  {combineReducers}  from 'redux';\r\n\r\nexport const rootReducer = combineReducers({\r\n    FranchiseReducer,\r\n    GamesReducer,\r\n    DateReducer\r\n  })","export const FranchiseReducer = (state = [], action) => {\r\n    switch(action.type){\r\n      case 'ADD_FRANCHISE':\r\n        return [...action.payload]\r\n      default:\r\n        return state\r\n    }\r\n  }","export const GamesReducer = (state = [], action) => {\r\n    let games = state.slice()\r\n    switch(action.type){\r\n      case 'ADD_GAME':\r\n        return [...state, action.payload]\r\n      case 'REMOVE_GAME':\r\n        let copy1 = state.slice(0, action.index)\r\n        let copy2 = state.slice(action.index+1)\r\n        copy1 = copy1.concat(copy2)\r\n        return copy1\r\n      case 'SWAP_MATCHUP':\r\n        let tempHolder = games[action.index].winner\r\n        games[action.index].winner = games[action.index].loser\r\n        games[action.index].loser = tempHolder\r\n        return [...games]\r\n      case 'SET_WINNER_INFO':\r\n        games[action.index].winner = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_INFO':\r\n        games[action.index].loser = action.payload\r\n        return [...games]\r\n      case 'SET_WINNER_RUNS':\r\n        games[action.index].winnerRuns = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_RUNS':\r\n        games[action.index].loserRuns = action.payload\r\n        return [...games]\r\n      case 'SET_VENUE':\r\n        games[action.index].venue = action.payload\r\n        return [...games]\r\n      case 'GET_GAMES':\r\n        return state\r\n      default:\r\n        return state  \r\n    }\r\n  }","import './App.css';\r\nimport Main from './containers/Main';\r\nimport {BrowserRouter as Router, Switch, Link, Route} from \"react-router-dom\";\r\nimport GamesContainer from './containers/GamesContainer.js';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport App2 from './App2';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport { rootReducer } from './reducers/RootReducer.js';\r\nimport QueryYearContext from './contexts/queryYearContext';\r\nimport TestContextOutsideOfProvider from './containers/TestContextOutsideOfProvider';\r\nimport GameDetails from './containers/GameDetails';\r\n\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename =\"/\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n              <Nav>\r\n                <Nav.Link as={Link} to=\"/\"> Standings </Nav.Link>\r\n                <Nav.Link as={Link} to=\"/games\"> Final Scores </Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n\r\n          </Navbar>\r\n        <Switch>\r\n        <QueryYearContext>\r\n          <Route exact path = \"/\">\r\n            <Main />\r\n          </Route>\r\n          <Route path = \"/games\">\r\n            <GamesContainer />\r\n          </Route>\r\n          <Route path = \"/admin\">\r\n            <Provider store={store}>\r\n              <App2 />\r\n            </Provider>\r\n          </Route>\r\n          <Route path='/game/:id'>\r\n            <GameDetails />\r\n          </Route>\r\n        </QueryYearContext>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}