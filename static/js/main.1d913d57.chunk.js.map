{"version":3,"sources":["components/Team.js","components/League.js","App.js","reportWebVitals.js","index.js"],"names":["Team","props","fixedGamesBack","gamesBack","toFixed","team","record","wins","losses","pct","streak","League","useState","teams","setTeams","sortUp","setSortDirection","reorganize","key","value","state","sort","a","b","prevState","map","item","teamId","league","useEffect","fetch","method","accept","then","res","json","data","results","summary","onClick","localeCompare","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d913d57.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Team(props){\r\n\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.record}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n    \r\n}\r\n\r\nexport default Team;","import React, {useState, useEffect} from 'react';\r\nimport { AiFillCaretUp, AiFillCaretDown} from \"react-icons/ai\";\r\nimport Team from './Team'\r\n\r\nfunction League(){\r\n    const [teams, setTeams] = useState([])\r\n    const [sortUp, setSortDirection] = useState({\r\n        pct: true,\r\n        gamesBack: true,\r\n        wins: true,\r\n        losses: true,\r\n        team: false\r\n    })\r\n    useEffect( () => {\r\n        fetch('https://api-mlb.herokuapp.com/', {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            let results = data.map(  (item) => \r\n            <Team \r\n                key = {item.teamId}\r\n                teamId = {item.teamId} \r\n                team = {item.team} \r\n                league = {item.league}\r\n                record = {item.summary.record}\r\n                wins = {item.summary.wins}\r\n                losses = {item.summary.losses}\r\n                pct = {item.summary.pct}\r\n                gamesBack = {item.summary.gamesBack}\r\n                streak = {item.summary.streak}\r\n            />)\r\n        setTeams(results)\r\n        })\r\n    },[])\r\n\r\n    function reorganize(key){\r\n        let state = [...teams]\r\n        state = state.sort( (a,b) => {\r\n            if (sortUp[`${key}`]){\r\n                return b.props[`${key}`] - a.props[`${key}`] \r\n            }\r\n            else{\r\n                return a.props[`${key}`] - b.props[`${key}`]\r\n            }\r\n        })\r\n        let value\r\n        if (key === \"pct\"){\r\n            value = sortUp[`${key}`]\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                pct: !value\r\n            }))\r\n        }\r\n        if (key === \"gamesBack\"){\r\n            value = sortUp[`${key}`]\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                gamesBack: !value\r\n            }))\r\n        }\r\n        if (key === \"wins\"){\r\n            value = sortUp[`${key}`]\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                wins: !value\r\n            }))\r\n        }\r\n        if (key === \"losses\"){\r\n            value = sortUp[`${key}`]\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                losses: !value\r\n            }))\r\n        }\r\n        state = state.map((item) => \r\n        <Team \r\n            key = {item.props.teamId}\r\n            teamId = {item.props.teamId} \r\n            team = {item.props.team} \r\n            league = {item.props.league}\r\n            record = {item.props.record}\r\n            wins = {item.props.wins}\r\n            losses = {item.props.losses}\r\n            pct = {item.props.pct}\r\n            gamesBack = {item.props.gamesBack}\r\n            streak = {item.props.streak}\r\n        />)\r\n        setTeams(state)\r\n\r\n    }\r\n\r\n    function reorganizeAlpha(){\r\n        let state = [...teams]\r\n        state = state.sort( (a,b) => {\r\n            if (sortUp.team){\r\n                return a.props.team.localeCompare(b.props.team)\r\n            }else{\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n        let value = sortUp.team\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            team: !value \r\n        }))\r\n        state = state.map((item) => \r\n        <Team \r\n            key = {item.props.teamId}\r\n            teamId = {item.props.teamId} \r\n            team = {item.props.team} \r\n            league = {item.props.league}\r\n            record = {item.props.record}\r\n            wins = {item.props.wins}\r\n            losses = {item.props.losses}\r\n            pct = {item.props.pct}\r\n            gamesBack = {item.props.gamesBack}\r\n            streak = {item.props.streak}\r\n        />)\r\n        setTeams(state)\r\n    }\r\n    return(\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <td> Team <button onClick={reorganizeAlpha}>{sortUp.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                        <td>Record</td>\r\n                        <td>Wins <button onClick ={() => reorganize(\"wins\")}> {sortUp.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                        <td>Losses <button onClick ={() => reorganize(\"losses\")}> {sortUp.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                        <td>Win % <button onClick ={() => reorganize(\"pct\")}> {sortUp.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                        <td>Games Back <button onClick ={() => reorganize(\"gamesBack\")}> {sortUp.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                        <td>Streak</td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{teams}</tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default League;","import './App.css';\nimport League from './components/League'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <h2> MLB Standings </h2>\n        <League />\n        <br></br>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}