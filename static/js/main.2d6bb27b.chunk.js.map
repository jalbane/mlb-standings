{"version":3,"sources":["components/DisplayTeam.js","components/YearSelection/YearSelection.js","hooks/useQueryYear.js","contexts/queryYearContext.js","containers/Main.js","components/DisplayGame.js","containers/FinalScores.js","components/Redux/Button.js","components/Redux/Output.js","components/Redux/GamesForm.js","App2.js","action.js","components/Redux/App2.js","reducers/DateReducer.js","reducers/RootReducer.js","reducers/FranchiseReducer.js","reducers/GamesReducer.js","App.js","index.js"],"names":["DisplayTeam","props","fixedGamesBack","gamesBack","toFixed","team","wins","losses","pct","streak","YearSelection","queryYear","setQueryYear","date","Date","id","htmlFor","type","defaultValue","min","Number","value","max","getFullYear","onChange","e","target","useQueryYear","React","useState","YearContext","createContext","useQueryYearContext","context","useContext","undefined","Error","QueryYearContext","children","values","useMemo","Provider","Wrapper","styled","div","Main","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","mapTeamState","state","league","map","item","teamId","record","prevState","reorganizeWins","sort","a","b","reverse","reorganizeLosses","reorganizeWinPercentage","reorganizeGamesBack","reorganizeAlpha","localeCompare","useEffect","results","controller","AbortController","axios","get","signal","response","status","data","resultsAmerican","slice","resultsNational","fetchTeams","abort","style","marginTop","color","height","colSpan","onClick","CompletedGames","split","formatDate","rest","className","stadium","join","concat","winner","loser","winnerRuns","loserRuns","FinalScores","completeGameRecap","setCompleteGameRecap","legend","setLegend","pageNumber","setPageNumber","maxPages","useRef","fetch","method","then","res","json","result","index","key","name","runs","current","pages","Array","from","tempData","filter","toLowerCase","includes","placeholder","DisplayGame","Button","handleEvent","Output","GamesForm","Games","i","Index","required","list","setWinnerInfo","hidden","Teams","setLoserInfo","setWinnerRuns","setLoserRuns","venue","setVenue","removeGame","swapMatchup","connect","MLBTeams","FranchiseReducer","GamesReducer","DateReducer","dispatch","addFranchise","arr","payload","addGame","obj","console","log","SET_VENUE","setDate","SET_DATE","getGames","displayOutput","setDisplayOutput","file","setFile","csvArray","setCsvArray","csvFile","reader","FileReader","onload","text","readAsText","readFile","length","test","trimStart","trimEnd","initTeamState","year","accept","files","toISOString","onFocus","currentTarget","onBlur","preventDefault","handleDate","opponent","isMatchInterLeague","division","matchUpFunc","printInterLeagueValue","printDivisionRivalValue","defaultDate","rootReducer","combineReducers","action","games","copy1","copy2","tempHolder","Object","assign","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","to","exact","path","App2","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6bb27b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DisplayTeam(props){\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n}\r\n\r\nexport default DisplayTeam;","import React from \"react\";\r\nimport './YearSelection.css'\r\n\r\nexport default function YearSelection({queryYear, setQueryYear}) {\r\n  let date = new Date();\r\n  return (\r\n    <div id=\"year-input\">\r\n      <label htmlFor=\"year-input\">Select year</label>\r\n      <input\r\n        type=\"number\"\r\n        data-testid=\"year-select\"\r\n        defaultValue={queryYear}\r\n        min={Number(2021)}\r\n        value={queryYear}\r\n        max={Number(date.getFullYear())}\r\n        onChange={(e) => setQueryYear(e.target.value)}\r\n      ></input>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\n\r\nconst useQueryYear = () => {\r\n    const [queryYear, setQueryYear] = React.useState(new Date().getFullYear())\r\n\r\n    return {\r\n        queryYear,\r\n        setQueryYear\r\n    }\r\n} \r\n\r\nexport default useQueryYear","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { useQueryYear } from \"../hooks\";\r\n\r\nconst YearContext = React.createContext()\r\nexport const useQueryYearContext = () => {\r\n    const context = useContext(YearContext)\r\n    if (context === undefined) {\r\n        throw new Error('QueryYearContext must be used within a QueryYearContext Provider')\r\n    }\r\n\r\n    return context\r\n}\r\n\r\n\r\nconst QueryYearContext = ({ children }) => {\r\n    const { queryYear, setQueryYear } = useQueryYear()\r\n\r\n    const values = React.useMemo(() => {\r\n        return [queryYear, setQueryYear]\r\n    }, [queryYear, setQueryYear])\r\n\r\n    return <YearContext.Provider value={values}>{children}</YearContext.Provider>\r\n}\r\n\r\nexport default QueryYearContext","import React,{useState, useEffect} from 'react';\r\nimport DisplayTeam from '../components/DisplayTeam';\r\nimport { AiFillCaretUp, AiFillCaretDown} from \"react-icons/ai\";\r\nimport Loader from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\nimport YearSelection from '../components/YearSelection/YearSelection';\r\nimport { useQueryYearContext } from '../contexts/queryYearContext';\r\nimport axios from 'axios'\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 0 auto;\r\n    padding-top: 1%;\r\n    padding-bottom: 1%;\r\n\r\n    & table {\r\n        margin-top: 0px;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    & table:nth-child(2) {\r\n        margin-top: 1%;\r\n    }\r\n\r\n    & table > thead > tr > th {\r\n        background-color: #bf0d3e;\r\n        color: white;\r\n        padding-left: 25px;\r\n    }\r\n\r\n    & table:nth-child(2) > thead > tr > th {\r\n        background-color: #041e42;\r\n    }\r\n`\r\n\r\nfunction Main() {\r\n    const [teams, setTeams] = useState({\r\n        american: [],\r\n        national: []\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        }\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    const [queryYear, setQueryYear] = useQueryYearContext()\r\n    useEffect( () => {\r\n        let results\r\n        const controller = new AbortController()\r\n\r\n        /* `https://api-mlb.herokuapp.com/` */\r\n        // fetch(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n        //     method: 'GET'\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => {\r\n        //     console.log(data)\r\n        //     results = data.map(  (item) =>\r\n        //         <DisplayTeam\r\n        //             key = {item.teamId}\r\n        //             teamId = {item.teamId}\r\n        //             team = {item.team}\r\n        //             league = {item.league}\r\n        //             record = {item.record}\r\n        //             wins = {item.wins}\r\n        //             losses = {item.losses}\r\n        //             pct = {item.pct}\r\n        //             gamesBack = {item.gamesBack}\r\n        //             streak = {item.streak}\r\n        //         />)\r\n        //     results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n        //     let resultsAmerican = results.slice(0, 15)\r\n        //     let resultsNational = results.slice(-15)\r\n        //     setTeams({\r\n        //         american: resultsAmerican,\r\n        //         national: resultsNational\r\n        //     })\r\n        //     setLoading(false)\r\n        // })\r\n        // .catch(err => {\r\n        //     if (err){\r\n        //         setLoading(false)\r\n        //     }\r\n        // })\r\n\r\n        const fetchTeams = async () => {\r\n            setLoading(true)\r\n            const response = await axios.get(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n                signal: controller.signal\r\n            })\r\n            if (response.status === 200) {\r\n                results = response.data.map(item => (\r\n                    <DisplayTeam\r\n                        key={item.teamId}\r\n                        teamId={item.teamId}\r\n                        team={item.team}\r\n                        league={item.league}\r\n                        record={item.record}\r\n                        wins={item.wins}\r\n                        losses={item.losses}\r\n                        pct={item.pct}\r\n                        gamesBack={item.gamesBack}\r\n                        streak={item.streak}\r\n                    />\r\n                ))\r\n                results = results.sort((a, b) => {\r\n                    return a.props.league - b.props.league\r\n                })\r\n                let resultsAmerican = results.slice(0, 15)\r\n                let resultsNational = results.slice(-15)\r\n                setTeams({\r\n                    american: resultsAmerican,\r\n                    national: resultsNational\r\n                })\r\n                setLoading(false)\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchTeams()\r\n\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [queryYear])\r\n\r\n    function mapTeamState(state, league) {\r\n        state = state.map(item => (\r\n            <DisplayTeam\r\n                key={item.props.teamId}\r\n                teamId={item.props.teamId}\r\n                team={item.props.team}\r\n                league={item.props.league}\r\n                record={item.props.record}\r\n                wins={item.props.wins}\r\n                losses={item.props.losses}\r\n                pct={item.props.pct}\r\n                gamesBack={item.props.gamesBack}\r\n                streak={item.props.streak}\r\n            />\r\n        ))\r\n        if (league === 'american') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if (league === 'national') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reorganizeWins handles sorting for # of wins and win percentage,\r\n     * because they are closely related. Also sorting wins in descending order\r\n     * will toggle the state for # of losses to display in ascending order.\r\n     * @param {*} league -- string for either american or national league\r\n     */\r\n    function reorganizeWins(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.wins - a.props.wins\r\n        })\r\n        if (!sortDirection[`${league}`].wins) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                wins: !prevState[`${league}`].wins,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeLosses(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.losses - a.props.losses\r\n        })\r\n        if (!sortDirection[`${league}`].losses) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                losses: !prevState[`${league}`].losses,\r\n                wins: prevState[`${league}`].losses,\r\n                pct: prevState[`${league}`].losses\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeWinPercentage(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.pct - a.props.pct\r\n        })\r\n        if (!sortDirection[`${league}`].pct) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                pct: !prevState[`${league}`].pct,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeGamesBack(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.gamesBack - a.props.gamesBack\r\n        })\r\n        if (!sortDirection[`${league}`].gamesBack) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                gamesBack: !prevState[`${league}`].gamesBack,\r\n                wins: prevState[`${league}`].gamesBack,\r\n                pct: prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeAlpha(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            if (sortDirection[`${league}`].team) {\r\n                return a.props.team.localeCompare(b.props.team)\r\n            } else {\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                team: !prevState[`${league}`].team\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    return( \r\n        <Wrapper> \r\n            {loading \r\n            ? <div style={{marginTop: '5%'}}> Loading <Loader color={'black'} height={60}/></div>\r\n            :\r\n            <div>\r\n                <YearSelection queryYear={queryYear} setQueryYear={setQueryYear}/>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"6\">American League</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"american\")}>{sortDirection.american.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Wins <button onClick ={() => reorganizeWins(\"american\")}> {sortDirection.american.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganizeLosses(\"american\")}> {sortDirection.american.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganizeWinPercentage(\"american\")}> {sortDirection.american.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganizeGamesBack(\"american\")}> {sortDirection.american.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.american}\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <thead><tr><th colSpan=\"6\">National League</th></tr></thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"national\")}>{sortDirection.national.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Wins <button onClick ={() => reorganizeWins(\"national\")}> {sortDirection.national.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganizeLosses(\"national\")}> {sortDirection.national.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganizeWinPercentage(\"national\")}> {sortDirection.national.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganizeGamesBack(\"national\")}> {sortDirection.national.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.national}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            }   \r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\n\r\nfunction CompletedGames( {props} ){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <div> {rest.join('/').concat('/', formatDate)} </div>\r\n            </div>\r\n            <div className = \"info-container\"> \r\n                <div className=\"left\"> {props.winner}</div>\r\n                <div> vs </div>\r\n                <div className=\"right\"> {props.loser}  </div> \r\n            </div>\r\n            <div className = \"info-container\">\r\n                <div className=\"left\"> {props.winnerRuns} </div> \r\n                <div> - </div>\r\n                <div className=\"right\"> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;\r\n\r\n/**/","\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport DisplayGame from '../components/DisplayGame';\r\nimport YearSelection from '../components/YearSelection/YearSelection';\r\nimport { useQueryYearContext } from '../contexts/queryYearContext';\r\n\r\nfunction FinalScores(){\r\n    const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n    const [legend, setLegend] = useState()\r\n    const [pageNumber, setPageNumber] = useState(0)\r\n    const [queryYear, setQueryYear] = useQueryYearContext()\r\n\r\n    let maxPages = useRef(null)\r\n    useEffect( () => {\r\n        let results = []\r\n        fetch(`https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}&season=${queryYear}`, {\r\n            method: 'GET',\r\n            //accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.result.map( (item, index)=> {return {\r\n                key: index,\r\n                date: item.date,\r\n                stadium: item.stadium,\r\n                winner: item.winner.name,\r\n                winnerRuns: item.winner.runs,\r\n                loser: item.loser.name,\r\n                loserRuns: item.loser.runs\r\n            }\r\n            })\r\n            maxPages.current = data.pages\r\n            setCompleteGameRecap(Array.from(results))\r\n            setLegend(Array.from(results))\r\n            setLoading(false)\r\n        })\r\n    },[pageNumber, queryYear])\r\n\r\n    const handleSearch = (e) => {\r\n        if (e.target.value){\r\n            let tempData = legend.filter( (item) => {\r\n                if (item.winner.toLowerCase().includes(e.target.value.toLowerCase()) \r\n                    || item.loser.toLowerCase().includes(e.target.value.toLowerCase())\r\n                    || item.stadium.toLowerCase().includes(e.target.value.toLowerCase())\r\n                    || item.date.toLowerCase().includes(e.target.value.toLowerCase())\r\n                )\r\n                    return item\r\n                else \r\n                    return null;\r\n            })\r\n            return setCompleteGameRecap(tempData)\r\n            \r\n        }\r\n        \r\n        return setCompleteGameRecap(legend)\r\n    }\r\n\r\n    return(\r\n        // <Page>\r\n        //     <Games />\r\n        // </Page>\r\n        <div>\r\n            { loading\r\n                ? <div> loading </div> \r\n                : \r\n                    <div >   \r\n                        <YearSelection queryYear={queryYear} setQueryYear={setQueryYear}/>\r\n                        <input onChange = {handleSearch} placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {completeGameRecap.map( (item, index) => <DisplayGame key={index} props={item} /> ) }\r\n                        </div>                         \r\n                        <div className=\"page-bar\">\r\n                            <button onClick={() => pageNumber ? setPageNumber(  prevState => prevState - 1 ): 0 }> <strong> Go back </strong> </button>\r\n                            <div className=\"page-number\"> Page {pageNumber + 1} out of {maxPages.current + 1} </div>\r\n                            <button onClick={() => pageNumber === maxPages.current? null : setPageNumber(prevState => prevState + 1)}> <strong> Next page </strong> </button>\r\n                        </div>\r\n                    </div>\r\n            }\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinalScores;","import React from \"react\";\r\n\r\nexport const Button = (props) => {\r\n  return (\r\n    <button type=\"button\" onClick={() => props.handleEvent(props.index)}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Output= (props) => {\r\n    return(\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from './Button.js';\r\n\r\nfunction GamesForm(props){\r\n    /*\r\n    function handleWinner(e, i){\r\n        props.setWinnerInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleLoser(e, i){\r\n        props.setLoserInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleWinnerRuns(e, i){\r\n        props.setWinnerRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleLoserRuns(e, i){\r\n        props.setLoserRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleVenue(e, i){\r\n        props.setVenue(e.target.value, i)\r\n    }*/\r\n\r\n    return(\r\n        <div>\r\n            {props.Games.map( (i, Index) => {\r\n                return (\r\n                    <form key={Index}>\r\n                        <label> Winner \r\n                        <input required list =\"teams\" name=\"winner\" id =\"winner\" value={i.winner} onChange={(e) => props.setWinnerInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden value=\"\"></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Loser -\r\n                            <input list=\"teams\" name=\"loser\" id =\"loser\" value={i.loser} onChange={(e) => props.setLoserInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Score\r\n                            <input type=\"text\" value={i?.winnerRuns} onChange = {(e)=> props.setWinnerRuns(e.target.value, Index)}></input>\r\n                            -\r\n                            <input type=\"text\" value={i?.loserRuns} onChange = {(e)=> props.setLoserRuns(e.target.value, Index)}></input>\r\n                        </label>\r\n                        <label> Venue\r\n                            <select name = \"venue\" id =\"venue\" defaultValue={i?.venue} onChange = {(e)=> props.setVenue(e.target.value, Index)}>\r\n                                <option hidden></option>\r\n                                <option> American Family Field </option>\r\n                                <option> Angel Stadium </option>\r\n                                <option> Busch Stadium </option>\r\n                                <option> Camden Yards </option>\r\n                                <option> Chase Field </option>\r\n                                <option> Citi Field</option>\r\n                                <option> Citizens Bank Park</option>\r\n                                <option> Comerica Park</option>\r\n                                <option> Coors Field </option>\r\n                                <option> Dodger Stadium </option>\r\n                                <option> Fenway Park</option>\r\n                                <option> Globe Life Field</option>\r\n                                <option> Great American Ball Park</option>\r\n                                <option> Guaranteed Rate Field</option>\r\n                                <option> Kauffman Stadium</option>\r\n                                <option> loanDepot Park</option>\r\n                                <option> Minute Maid Park</option>\r\n                                <option> Nationals Park</option>\r\n                                <option> Oakland Coliseum</option>\r\n                                <option> Oracle Park</option>\r\n                                <option> Petco Park</option>\r\n                                <option> PNC Park</option>\r\n                                <option> Progressive Field</option>\r\n                                <option> Rogers Centre</option>\r\n                                <option> T-Mobile Park</option>\r\n                                <option> Target Field</option>\r\n                                <option> Tropicana Field</option>\r\n                                <option> Truist Park</option>\r\n                                <option> Wrigley Field</option>\r\n                                <option> Yankee Stadium</option>\r\n                            </select>\r\n                        </label>\r\n                        <Button handleEvent={i => props.removeGame(i)} index={Index}> Remove </Button>\r\n                        <Button handleEvent={i => props.swapMatchup(i)} index={Index}> Swap </Button>\r\n                    </form>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesForm;","import {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES} from './action.js'\r\nimport {connect} from 'react-redux'\r\nimport App2 from './components/Redux/App2';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    MLBTeams: state.FranchiseReducer,\r\n    Games: state.GamesReducer,\r\n    Date: state.DateReducer.date\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFranchise: (arr) => dispatch(ADD_FRANCHISE(arr)),\r\n    addGame: () => dispatch(ADD_GAME()),\r\n    removeGame: (index) => dispatch(REMOVE_GAME(index)),\r\n    swapMatchup: (index) => dispatch(SWAP_MATCHUP(index)),\r\n    setWinnerInfo: (obj, index) => dispatch(SET_WINNER_INFO(obj, index)),\r\n    setLoserInfo: (obj, index) => dispatch(SET_LOSER_INFO(obj, index)),\r\n    setWinnerRuns: (obj, index) => dispatch(SET_WINNER_RUNS(obj, index)),    \r\n    setLoserRuns: (obj, index) => dispatch(SET_LOSER_RUNS(obj, index)),\r\n    setVenue: (venue, index) => dispatch(SET_VENUE(venue, index)),\r\n    setDate: (Date) => dispatch(SET_DATE(Date)),\r\n    getGames: () => dispatch(GET_GAMES())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App2);","const ADD_FRANCHISE = (obj) => {\r\n    return {\r\n        type: 'ADD_FRANCHISE',\r\n        payload: obj\r\n    }\r\n}\r\n\r\nconst ADD_GAME = () => {\r\n    return {\r\n        type: 'ADD_GAME',\r\n        payload: {\r\n            winner: '',\r\n            loser: '',\r\n            winnerRuns: null,\r\n            loserRuns: null,\r\n            venue: ''\r\n        }\r\n    }\r\n}\r\n\r\nconst REMOVE_GAME = (i) => {\r\n    return {\r\n        type: 'REMOVE_GAME',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SWAP_MATCHUP = (i) => {\r\n    return {\r\n        type: 'SWAP_MATCHUP',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_INFO = (winner, i) => {\r\n    console.log(winner, i)\r\n    return {\r\n        type: 'SET_WINNER_INFO',\r\n        payload: winner,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_INFO = (loser, i) => {\r\n    return {\r\n        type: 'SET_LOSER_INFO',\r\n        payload: loser,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_WINNER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_LOSER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_VENUE = (venue, i) => {\r\n    return {\r\n        type: 'SET_VENUE',\r\n        payload: venue,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_DATE = (Date) => {\r\n    return{\r\n        type: 'SET_DATE',\r\n        payload: Date\r\n    }\r\n}\r\n\r\nconst GET_GAMES = () => {\r\n    return {\r\n        type: 'GET_GAMES'\r\n    }\r\n}\r\n\r\nexport {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES};","import React, { useEffect, useState } from 'react'\r\nimport { Button } from './Button'\r\nimport { Output } from './Output'\r\nimport GamesForm from './GamesForm.js'\r\n//import \"../App.css\";\r\n\r\nexport default function App(props) {\r\n    let [displayOutput, setDisplayOutput] = useState(false)\r\n    const [file, setFile] = useState()\r\n    const [csvArray, setCsvArray] = useState()\r\n\r\n    console.log(file)\r\n\r\n    useEffect(() => {\r\n      console.log('asdf')\r\n      const readFile = () => {\r\n        const csvFile = file\r\n        const reader = new FileReader()\r\n\r\n            reader.onload = function(e){\r\n                const text = e.target.result\r\n               // console.log(text)\r\n                setCsvArray(text)\r\n\r\n               \r\n            }\r\n          reader.readAsText(csvFile)\r\n      }\r\n      if(file && file.name !== null)\r\n        readFile()\r\n\r\n    }, [file])\r\n    console.log(props)\r\n    useEffect(() => {\r\n      const populateInput = () => {\r\n        const input = csvArray.split('\\n')\r\n        input.map( (item, index) => {\r\n          props.addGame()\r\n          console.log(index)\r\n          const info = item.split(' vs ').join(', ')\r\n          const test = info.split(',')\r\n\r\n            props.setWinnerInfo(test[0], index)\r\n            props.setLoserInfo(test[1].trimStart().trimEnd(), index)\r\n            props.setVenue(test[2].trimStart().trimEnd(), index)\r\n            props.setWinnerRuns(Number(test[4]), index)\r\n            props.setLoserRuns(Number(test[5]), index)\r\n\r\n        })\r\n      }\r\n\r\n      if(csvArray && csvArray.length !== 0)\r\n        populateInput()\r\n    }, [csvArray])\r\n\r\n    let initTeamState = props.addFranchise\r\n    useEffect(() => {\r\n        fetch(`https://api-mlb.herokuapp.com?season=2022`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                initTeamState(data)\r\n            })\r\n    }, [])\r\n\r\n    function handleDate(e) {\r\n        e.preventDefault()\r\n        props.setDate(e.target.value)\r\n    }\r\n\r\n    function formatDate() {\r\n        let [year, ...date] = props.Date.split('-')\r\n        date = date.join('-')\r\n        date = [date, '-', ...year].join('')\r\n        return date\r\n    }\r\n\r\n    let matchUpFunc = function (winner, loser) {\r\n        let opponent = 1\r\n        let isMatchInterLeague = (function () {\r\n            opponent = props.MLBTeams.filter(item => {\r\n                return item.team === winner || item.team === loser ? item : null\r\n            })\r\n            return checkLeague(opponent[0].league, opponent[1].league)\r\n        })()\r\n\r\n        function checkLeague(a, b) {\r\n            return a === b ? 0 : 1\r\n        }\r\n\r\n        function checkDivisionString(a, b) {\r\n            return a === b ? 1 : 0\r\n        }\r\n\r\n        function checkDivisionRivals() {\r\n            if (!isMatchInterLeague)\r\n                return checkDivisionString(opponent[0].division, opponent[1].division)\r\n            return 0\r\n        }\r\n\r\n        return [isMatchInterLeague, checkDivisionRivals]\r\n    }\r\n\r\n    function generateOutput() {\r\n        let output = props.Games.map((item, i) => {\r\n            if (item.winner === '' || item.loser === '') return null\r\n\r\n            let [printInterLeagueValue, printDivisionRivalValue] = matchUpFunc(\r\n                item.winner,\r\n                item.loser\r\n            )\r\n\r\n            return (\r\n                <Output key={i}>\r\n                    {item.winner} vs {item.loser}, {item.venue}, {formatDate()},&nbsp;\r\n                    {item.winnerRuns}, {item.loserRuns}, 0, {printDivisionRivalValue()},&nbsp;\r\n                    {printInterLeagueValue},\r\n                </Output>\r\n            )\r\n        })\r\n\r\n        return output\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                type=\"file\"\r\n                placeholder={'import'}\r\n                accept=\".csv\"\r\n                onChange={e => setFile(e.target.files[0])}\r\n            />\r\n            <input\r\n                required\r\n                type=\"text\"\r\n                placeholder={new Date().toISOString().split('T')[0]}\r\n                onFocus={e => (e.currentTarget.type = 'date')}\r\n                onBlur={e => (e.currentTarget.type = 'text')}\r\n                onChange={e => handleDate(e)}\r\n            ></input>\r\n            {props.Games.length === 0 ? (\r\n                <div> No game data </div>\r\n            ) : (\r\n                <GamesForm\r\n                    Games={props.Games}\r\n                    Teams={props.MLBTeams}\r\n                    setWinnerInfo={props.setWinnerInfo}\r\n                    setLoserInfo={props.setLoserInfo}\r\n                    setWinnerRuns={props.setWinnerRuns}\r\n                    setLoserRuns={props.setLoserRuns}\r\n                    setVenue={props.setVenue}\r\n                    removeGame={props.removeGame}\r\n                    swapMatchup={props.swapMatchup}\r\n                />\r\n            )}\r\n            <Button handleEvent={props.addGame}> Enter another game </Button>\r\n            <Button handleEvent={() => setDisplayOutput(!displayOutput)}>Toggle output</Button>\r\n            {displayOutput ? generateOutput() : () => props.getGames}\r\n        </div>\r\n    )\r\n}\r\n/*\r\n * let myvar = new Date()\r\n    console.log myvar\r\n    outputs: Fri Nov 05 2021 00:46:17 GMT-0400 (Eastern Daylight Time)\r\n\r\n    Date.parse(myvar)\r\n    outputs: 1636087577000\r\n\r\n    let holdms = Date.parse(myvar)\r\n\r\n    let correctedDate = holdms - (60000* myvar.getTimezoneOffset())\r\n\r\n    correctedDate = new Date(correctedDate)\r\n    outputs: Thu Nov 04 2021 20:46:17 GMT-0400 (Eastern Daylight Time)\r\n */\r\n","const defaultDate = new Date()\r\n\r\nexport const DateReducer = (state= {date: defaultDate.toISOString().split('T')[0]}, action) => {\r\n  switch(action.type){\r\n    case 'SET_DATE':\r\n      return Object.assign({}, {date: action.payload});\r\n    default: \r\n      return state;\r\n  }\r\n}","import {DateReducer} from './DateReducer.js' \r\nimport {GamesReducer} from './GamesReducer.js' \r\nimport {FranchiseReducer} from './FranchiseReducer.js' \r\nimport  {combineReducers}  from 'redux';\r\n\r\nexport const rootReducer = combineReducers({\r\n    FranchiseReducer,\r\n    GamesReducer,\r\n    DateReducer\r\n  })","export const FranchiseReducer = (state = [], action) => {\r\n    switch(action.type){\r\n      case 'ADD_FRANCHISE':\r\n        return [...action.payload]\r\n      default:\r\n        return state\r\n    }\r\n  }","export const GamesReducer = (state = [], action) => {\r\n    let games = state.slice()\r\n    switch(action.type){\r\n      case 'ADD_GAME':\r\n        return [...state, action.payload]\r\n      case 'REMOVE_GAME':\r\n        let copy1 = state.slice(0, action.index)\r\n        let copy2 = state.slice(action.index+1)\r\n        copy1 = copy1.concat(copy2)\r\n        return copy1\r\n      case 'SWAP_MATCHUP':\r\n        let tempHolder = games[action.index].winner\r\n        games[action.index].winner = games[action.index].loser\r\n        games[action.index].loser = tempHolder\r\n        return [...games]\r\n      case 'SET_WINNER_INFO':\r\n        games[action.index].winner = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_INFO':\r\n        games[action.index].loser = action.payload\r\n        return [...games]\r\n      case 'SET_WINNER_RUNS':\r\n        games[action.index].winnerRuns = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_RUNS':\r\n        games[action.index].loserRuns = action.payload\r\n        return [...games]\r\n      case 'SET_VENUE':\r\n        games[action.index].venue = action.payload\r\n        return [...games]\r\n      case 'GET_GAMES':\r\n        return state\r\n      default:\r\n        return state  \r\n    }\r\n  }","import './App.css';\r\nimport Main from './containers/Main.js';\r\nimport { BrowserRouter as Router, Switch, Link, Route } from \"react-router-dom\";\r\nimport FinalScores from './containers/FinalScores.js';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport App2 from './App2';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport { rootReducer } from './reducers/RootReducer.js';\r\nimport QueryYearContext from './contexts/queryYearContext';\r\nimport TestContextOutsideOfProvider from './containers/TestContextOutsideOfProvider';\r\n\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <TestContextOutsideOfProvider /> */}\r\n      <QueryYearContext>\r\n        <Router basename=\"/mlb-standings\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n              <Nav>\r\n                <Nav.Link as={Link} to=\"/\"> Standings </Nav.Link>\r\n                <Nav.Link as={Link} to=\"/games\"> Final Scores </Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n\r\n          </Navbar>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Main />\r\n            </Route>\r\n            <Route path=\"/games\">\r\n              <FinalScores />\r\n            </Route>\r\n            <Route path=\"/admin\">\r\n              <Provider store={store}>\r\n                <App2 />\r\n              </Provider>\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </QueryYearContext>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}