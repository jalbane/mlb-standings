{"version":3,"sources":["components/DisplayTeam.js","containers/Main.js","components/DisplayGame.js","containers/FinalScores.js","components/Redux/Button.js","components/Redux/Output.js","components/Redux/GamesForm.js","App2.js","action.js","components/Redux/App2.js","reducers/DateReducer.js","reducers/RootReducer.js","reducers/FranchiseReducer.js","reducers/GamesReducer.js","App.js","index.js"],"names":["DisplayTeam","props","fixedGamesBack","gamesBack","toFixed","team","wins","losses","pct","streak","Wrapper","styled","div","Main","useState","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","mapTeamState","state","league","map","item","teamId","record","prevState","reorganizeWins","sort","a","b","reverse","reorganizeLosses","reorganizeWinPercentage","reorganizeGamesBack","reorganizeAlpha","localeCompare","useEffect","results","fetch","method","accept","then","res","json","data","console","log","resultsAmerican","slice","resultsNational","style","marginTop","color","height","colSpan","onClick","CompletedGames","date","split","formatDate","rest","className","stadium","join","concat","winner","loser","winnerRuns","loserRuns","FinalScores","completeGameRecap","setCompleteGameRecap","legend","setLegend","pageNumber","setPageNumber","maxPages","useRef","result","index","key","name","runs","current","pages","Array","from","onChange","e","target","value","tempData","filter","toLowerCase","includes","placeholder","DisplayGame","Button","type","handleEvent","children","Output","GamesForm","Games","i","Index","required","list","id","setWinnerInfo","hidden","Teams","setLoserInfo","setWinnerRuns","setLoserRuns","defaultValue","setVenue","removeGame","swapMatchup","connect","MLBTeams","FranchiseReducer","GamesReducer","Date","DateReducer","dispatch","addFranchise","arr","payload","addGame","venue","obj","SET_VENUE","setDate","SET_DATE","getGames","displayOutput","setDisplayOutput","initTeamState","year","toISOString","onFocus","currentTarget","onBlur","preventDefault","handleDate","length","opponent","isMatchInterLeague","division","matchUpFunc","printInterLeagueValue","printDivisionRivalValue","defaultDate","rootReducer","combineReducers","action","games","copy1","copy2","tempHolder","Object","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","to","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a6959d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DisplayTeam(props){\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n}\r\n\r\nexport default DisplayTeam;","import React,{useState, useEffect} from 'react';\r\nimport DisplayTeam from '../components/DisplayTeam';\r\nimport { AiFillCaretUp, AiFillCaretDown} from \"react-icons/ai\";\r\nimport Loader from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\nimport YearSelection from '../components/YearSelection/YearSelection';\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 0 auto;\r\n    padding-top: 2%;\r\n    padding-bottom: 2%;\r\n\r\n    & table {\r\n        margin-top: 0px;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    & table:nth-child(2){\r\n        margin-top: 2%;\r\n    }\r\n\r\n    & table > thead > tr > th{\r\n        background-color: #BF0D3E;\r\n        color: white;\r\n        padding-left: 25px;\r\n    }\r\n\r\n    & table:nth-child(2) > thead > tr > th{\r\n        background-color: #041E42;\r\n    }\r\n\r\n`\r\n\r\nfunction Main(){\r\n    const [teams, setTeams] = useState({\r\n        american: [\r\n\r\n        ],\r\n        national: [\r\n\r\n        ]\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {    \r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {    \r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        }\r\n\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect( () => {\r\n        let results\r\n        fetch(`https://api-mlb.herokuapp.com/`, {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            results = data.map(  (item) => \r\n                <DisplayTeam \r\n                    key = {item.teamId}\r\n                    teamId = {item.teamId} \r\n                    team = {item.team} \r\n                    league = {item.league}\r\n                    record = {item.record}\r\n                    wins = {item.wins}\r\n                    losses = {item.losses}\r\n                    pct = {item.pct}\r\n                    gamesBack = {item.gamesBack}\r\n                    streak = {item.streak}\r\n                />)\r\n            results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n            let resultsAmerican = results.slice(0, 15)\r\n            let resultsNational = results.slice(-15)\r\n            setTeams({\r\n                american: resultsAmerican,\r\n                national: resultsNational\r\n            })\r\n            setLoading(false)\r\n        })\r\n    },[])\r\n\r\n    function mapTeamState(state, league){\r\n        state = state.map((item) => \r\n        <DisplayTeam \r\n            key = {item.props.teamId}\r\n            teamId = {item.props.teamId} \r\n            team = {item.props.team} \r\n            league = {item.props.league}\r\n            record = {item.props.record}\r\n            wins = {item.props.wins}\r\n            losses = {item.props.losses}\r\n            pct = {item.props.pct}\r\n            gamesBack = {item.props.gamesBack}\r\n            streak = {item.props.streak}\r\n        />)\r\n        if(league === 'american'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if(league === 'national'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reorganizeWins handles sorting for # of wins and win percentage,\r\n     * because they are closely related. Also sorting wins in descending order\r\n     * will toggle the state for # of losses to display in ascending order. \r\n     * @param {*} league -- string for either american or national league\r\n     */\r\n    function reorganizeWins(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.wins - a.props.wins \r\n        })\r\n        if (!sortDirection[`${league}`].wins)\r\n            state.reverse()\r\n        \r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                wins: !prevState[`${league}`].wins,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeLosses(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.losses - a.props.losses \r\n        })\r\n        if (!sortDirection[`${league}`].losses)\r\n            state.reverse()\r\n        \r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                losses: !prevState[`${league}`].losses,\r\n                wins: prevState[`${league}`].losses,\r\n                pct: prevState[`${league}`].losses\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n    \r\n    function reorganizeWinPercentage(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.pct - a.props.pct \r\n        })\r\n        if (!sortDirection[`${league}`].pct)\r\n            state.reverse()\r\n        \r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                pct: !prevState[`${league}`].pct,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeGamesBack(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.gamesBack - a.props.gamesBack \r\n        })\r\n        if (!sortDirection[`${league}`].gamesBack)\r\n            state.reverse()\r\n\r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                gamesBack: !prevState[`${league}`].gamesBack,\r\n                wins: prevState[`${league}`].gamesBack,\r\n                pct: prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeAlpha(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            if (sortDirection[`${league}`].team){\r\n                return a.props.team.localeCompare(b.props.team)\r\n            }else{\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n\r\n        setSortDirection( (prevState) => ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                team: !prevState[`${league}`].team\r\n            }\r\n        }))\r\n        \r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    return( \r\n        <Wrapper> \r\n            {loading \r\n            ? <div style={{marginTop: '5%'}}> Loading <Loader color={'black'} height={60}/></div>\r\n            :\r\n            <div>\r\n                {/*<YearSelection />*/}\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"6\">American League</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"american\")}>{sortDirection.american.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Wins <button onClick ={() => reorganizeWins(\"american\")}> {sortDirection.american.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganizeLosses(\"american\")}> {sortDirection.american.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganizeWinPercentage(\"american\")}> {sortDirection.american.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganizeGamesBack(\"american\")}> {sortDirection.american.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.american}\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <thead><tr><th colSpan=\"6\">National League</th></tr></thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"national\")}>{sortDirection.national.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Wins <button onClick ={() => reorganizeWins(\"national\")}> {sortDirection.national.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganizeLosses(\"national\")}> {sortDirection.national.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganizeWinPercentage(\"national\")}> {sortDirection.national.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganizeGamesBack(\"national\")}> {sortDirection.national.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.national}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            }   \r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nfunction CompletedGames( {props} ){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <div> {rest.join('/').concat('/', formatDate)} </div>\r\n            </div>\r\n            <div className = \"info-container\"> \r\n                <div className=\"left\"> {props.winner}</div>\r\n                <div> vs </div>\r\n                <div className=\"right\"> {props.loser}  </div> \r\n            </div>\r\n            <div className = \"info-container\">\r\n                <div className=\"left\"> {props.winnerRuns} </div> \r\n                <div> - </div>\r\n                <div className=\"right\"> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;\r\n\r\n/**/","\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport DisplayGame from '../components/DisplayGame';\r\n\r\nfunction FinalScores(){\r\n    const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n    const [legend, setLegend] = useState()\r\n    const [pageNumber, setPageNumber] = useState(0)\r\n    let maxPages = useRef(null)\r\n    useEffect( () => {\r\n        let results = []\r\n        fetch(`https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}`, {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.result.map( (item, index)=> {return {\r\n                key: index,\r\n                date: item.date,\r\n                stadium: item.stadium,\r\n                winner: item.winner.name,\r\n                winnerRuns: item.winner.runs,\r\n                loser: item.loser.name,\r\n                loserRuns: item.loser.runs\r\n            }\r\n            })\r\n            maxPages.current = data.pages\r\n            setCompleteGameRecap(Array.from(results))\r\n            setLegend(Array.from(results))\r\n            setLoading(false)\r\n        })\r\n    },[pageNumber])\r\n\r\n    const handleSearch = (e) => {\r\n        if (e.target.value){\r\n            let tempData = legend.filter( (item) => {\r\n                if (item.winner.toLowerCase().includes(e.target.value.toLowerCase()) \r\n                    || item.loser.toLowerCase().includes(e.target.value.toLowerCase())\r\n                    || item.stadium.toLowerCase().includes(e.target.value.toLowerCase())\r\n                    || item.date.toLowerCase().includes(e.target.value.toLowerCase())\r\n                )\r\n                    return item\r\n                else \r\n                    return null;\r\n            })\r\n            return setCompleteGameRecap(tempData)\r\n            \r\n        }\r\n        \r\n        return setCompleteGameRecap(legend)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { loading\r\n                ? <div> loading </div> \r\n                : \r\n                    <div >   \r\n                        <input onChange = {handleSearch} placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {completeGameRecap.map( (item, index) => <DisplayGame key={index} props={item} /> ) }\r\n                        </div>                         \r\n                        <div className=\"page-bar\">\r\n                            <button onClick={() => pageNumber ? setPageNumber(  prevState => prevState - 1 ): 0 }> <strong> Go back </strong> </button>\r\n                            <div className=\"page-number\"> Page {pageNumber + 1} out of {maxPages.current + 1} </div>\r\n                            <button onClick={() => pageNumber === maxPages.current? null : setPageNumber(prevState => prevState + 1)}> <strong> Next page </strong> </button>\r\n                        </div>\r\n                    </div>\r\n            }\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinalScores;","import React from \"react\";\r\n\r\nexport const Button = (props) => {\r\n  return (\r\n    <button type=\"button\" onClick={() => props.handleEvent(props.index)}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Output= (props) => {\r\n    return(\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from './Button.js';\r\n\r\nfunction GamesForm(props){\r\n    /*\r\n    function handleWinner(e, i){\r\n        props.setWinnerInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleLoser(e, i){\r\n        props.setLoserInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleWinnerRuns(e, i){\r\n        props.setWinnerRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleLoserRuns(e, i){\r\n        props.setLoserRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleVenue(e, i){\r\n        props.setVenue(e.target.value, i)\r\n    }*/\r\n\r\n    return(\r\n        <div>\r\n            {props.Games.map( (i, Index) => {\r\n                return (\r\n                    <form key={Index}>\r\n                        <label> Winner \r\n                        <input required list =\"teams\" name=\"winner\" id =\"winner\" value={i.winner} onChange={(e) => props.setWinnerInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden value=\"\"></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Loser -\r\n                            <input list=\"teams\" name=\"loser\" id =\"loser\" value={i.loser} onChange={(e) => props.setLoserInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Score\r\n                            <input type=\"text\" onChange = {(e)=> props.setWinnerRuns(e.target.value, Index)}></input>\r\n                            -\r\n                            <input type=\"text\" onChange = {(e)=> props.setLoserRuns(e.target.value, Index)}></input>\r\n                        </label>\r\n                        <label> Venue\r\n                            <select name = \"venue\" id =\"venue\" defaultValue=\"\" onChange = {(e)=> props.setVenue(e.target.value, Index)}>\r\n                                <option hidden></option>\r\n                                <option> American Family Field </option>\r\n                                <option> Angel Stadium </option>\r\n                                <option> Busch Stadium </option>\r\n                                <option> Camden Yards </option>\r\n                                <option> Chase Field </option>\r\n                                <option> Citi Field</option>\r\n                                <option> Citizens Bank Park</option>\r\n                                <option> Comerica Park</option>\r\n                                <option> Coors Field </option>\r\n                                <option> Dodger Stadium </option>\r\n                                <option> Fenway Park</option>\r\n                                <option> Globe Life Field</option>\r\n                                <option> Great American Ball Park</option>\r\n                                <option> Guaranteed Rate Field</option>\r\n                                <option> Kauffman Stadium</option>\r\n                                <option> loanDepot Park</option>\r\n                                <option> Minute Maid Park</option>\r\n                                <option> Nationals Park</option>\r\n                                <option> Oakland Coliseum</option>\r\n                                <option> Oracle Park</option>\r\n                                <option> Petco Park</option>\r\n                                <option> PNC Park</option>\r\n                                <option> Progressive Field</option>\r\n                                <option> Rogers Centre</option>\r\n                                <option> T-Mobile Park</option>\r\n                                <option> Target Field</option>\r\n                                <option> Tropicana Field</option>\r\n                                <option> Truist Park</option>\r\n                                <option> Wrigley Field</option>\r\n                                <option> Yankee Stadium</option>\r\n                            </select>\r\n                        </label>\r\n                        <Button handleEvent={i => props.removeGame(i)} index={Index}> Remove </Button>\r\n                        <Button handleEvent={i => props.swapMatchup(i)} index={Index}> Swap </Button>\r\n                    </form>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesForm;","import {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES} from './action.js'\r\nimport {connect} from 'react-redux'\r\nimport App2 from './components/Redux/App2';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    MLBTeams: state.FranchiseReducer,\r\n    Games: state.GamesReducer,\r\n    Date: state.DateReducer.date\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFranchise: (arr) => dispatch(ADD_FRANCHISE(arr)),\r\n    addGame: () => dispatch(ADD_GAME()),\r\n    removeGame: (index) => dispatch(REMOVE_GAME(index)),\r\n    swapMatchup: (index) => dispatch(SWAP_MATCHUP(index)),\r\n    setWinnerInfo: (obj, index) => dispatch(SET_WINNER_INFO(obj, index)),\r\n    setLoserInfo: (obj, index) => dispatch(SET_LOSER_INFO(obj, index)),\r\n    setWinnerRuns: (obj, index) => dispatch(SET_WINNER_RUNS(obj, index)),    \r\n    setLoserRuns: (obj, index) => dispatch(SET_LOSER_RUNS(obj, index)),\r\n    setVenue: (venue, index) => dispatch(SET_VENUE(venue, index)),\r\n    setDate: (Date) => dispatch(SET_DATE(Date)),\r\n    getGames: () => dispatch(GET_GAMES())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App2);","const ADD_FRANCHISE = (obj) => {\r\n    return {\r\n        type: 'ADD_FRANCHISE',\r\n        payload: obj\r\n    }\r\n}\r\n\r\nconst ADD_GAME = () => {\r\n    return {\r\n        type: 'ADD_GAME',\r\n        payload: {\r\n            winner: '',\r\n            loser: '',\r\n            winnerRuns: null,\r\n            loserRuns: null,\r\n            venue: ''\r\n        }\r\n    }\r\n}\r\n\r\nconst REMOVE_GAME = (i) => {\r\n    return {\r\n        type: 'REMOVE_GAME',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SWAP_MATCHUP = (i) => {\r\n    return {\r\n        type: 'SWAP_MATCHUP',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_INFO = (winner, i) => {\r\n    return {\r\n        type: 'SET_WINNER_INFO',\r\n        payload: winner,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_INFO = (loser, i) => {\r\n    return {\r\n        type: 'SET_LOSER_INFO',\r\n        payload: loser,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_WINNER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_LOSER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_VENUE = (venue, i) => {\r\n    return {\r\n        type: 'SET_VENUE',\r\n        payload: venue,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_DATE = (Date) => {\r\n    return{\r\n        type: 'SET_DATE',\r\n        payload: Date\r\n    }\r\n}\r\n\r\nconst GET_GAMES = () => {\r\n    return {\r\n        type: 'GET_GAMES'\r\n    }\r\n}\r\n\r\nexport {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES};","import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"./Button\";\r\nimport { Output } from \"./Output\";\r\nimport GamesForm from \"./GamesForm.js\";\r\n//import \"../App.css\";\r\n\r\nexport default function App(props) {\r\n  let [displayOutput, setDisplayOutput] = useState(false);\r\n\r\n  let initTeamState = props.addFranchise;\r\n  useEffect(() => {\r\n    fetch(`https://api-mlb.herokuapp.com`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        initTeamState(data);\r\n      });\r\n  }, [initTeamState]);\r\n\r\n  function handleDate(e) {\r\n    e.preventDefault();\r\n    props.setDate(e.target.value);\r\n  }\r\n\r\n  function formatDate() {\r\n    let [year, ...date] = props.Date.split(\"-\");\r\n    date = date.join(\"-\");\r\n    date = [date, \"-\", ...year].join(\"\");\r\n    return date;\r\n  }\r\n\r\n  let matchUpFunc = function (winner, loser) {\r\n    let opponent = 1;\r\n    let isMatchInterLeague = (function () {\r\n      opponent = props.MLBTeams.filter((item) => {\r\n        return item.team === winner || item.team === loser ? item : null;\r\n      });\r\n      return checkLeague(opponent[0].league, opponent[1].league);\r\n    })();\r\n\r\n    function checkLeague(a, b) {\r\n      return a === b ? 0 : 1;\r\n    }\r\n\r\n    function checkDivisionString(a, b) {\r\n      return a === b ? 1 : 0;\r\n    }\r\n\r\n    function checkDivisionRivals() {\r\n      if (!isMatchInterLeague)\r\n        return checkDivisionString(opponent[0].division, opponent[1].division);\r\n      return 0;\r\n    }\r\n\r\n    return [isMatchInterLeague, checkDivisionRivals];\r\n  };\r\n\r\n  function generateOutput() {\r\n    let output = props.Games.map((item, i) => {\r\n      if (item.winner === \"\" || item.loser === \"\")\r\n        return \r\n\r\n      let [printInterLeagueValue, printDivisionRivalValue] = matchUpFunc(item.winner,item.loser);\r\n      \r\n      return (\r\n        <Output key={i}>\r\n          {item.winner} vs {item.loser}, {item.venue}, {formatDate()},&nbsp;\r\n          {item.winnerRuns}, {item.loserRuns}, 0, {printDivisionRivalValue()},&nbsp;\r\n          {printInterLeagueValue},\r\n        </Output>\r\n      );\r\n    });\r\n\r\n    return output;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        placeholder={new Date().toISOString().split(\"T\")[0]}\r\n        onFocus={(e) => (e.currentTarget.type = \"date\")}\r\n        onBlur={(e) => (e.currentTarget.type = \"text\")}\r\n        onChange={(e) => handleDate(e)}\r\n      ></input>\r\n      {props.Games.length === 0 ? (\r\n        <div> No game data </div>\r\n      ) : (\r\n        <GamesForm\r\n          Games={props.Games}\r\n          Teams={props.MLBTeams}\r\n          setWinnerInfo={props.setWinnerInfo}\r\n          setLoserInfo={props.setLoserInfo}\r\n          setWinnerRuns={props.setWinnerRuns}\r\n          setLoserRuns={props.setLoserRuns}\r\n          setVenue={props.setVenue}\r\n          removeGame={props.removeGame}\r\n          swapMatchup={props.swapMatchup}\r\n        />\r\n      )}\r\n      <Button handleEvent={props.addGame}> Enter another game </Button>\r\n      <Button handleEvent={() => setDisplayOutput(!displayOutput)}>\r\n        Toggle output\r\n      </Button>\r\n      {displayOutput ? generateOutput() : () => props.getGames}\r\n\r\n    </div>\r\n  );\r\n}\r\n /*\r\n * let myvar = new Date()\r\n    console.log myvar\r\n    outputs: Fri Nov 05 2021 00:46:17 GMT-0400 (Eastern Daylight Time)\r\n\r\n    Date.parse(myvar)\r\n    outputs: 1636087577000\r\n\r\n    let holdms = Date.parse(myvar)\r\n\r\n    let correctedDate = holdms - (60000* myvar.getTimezoneOffset())\r\n\r\n    correctedDate = new Date(correctedDate)\r\n    outputs: Thu Nov 04 2021 20:46:17 GMT-0400 (Eastern Daylight Time)\r\n */","const defaultDate = new Date()\r\n\r\nexport const DateReducer = (state= {date: defaultDate.toISOString().split('T')[0]}, action) => {\r\n  switch(action.type){\r\n    case 'SET_DATE':\r\n      return Object.assign({}, {date: action.payload});\r\n    default: \r\n      return state;\r\n  }\r\n}","import {DateReducer} from './DateReducer.js' \r\nimport {GamesReducer} from './GamesReducer.js' \r\nimport {FranchiseReducer} from './FranchiseReducer.js' \r\nimport  {combineReducers}  from 'redux';\r\n\r\nexport const rootReducer = combineReducers({\r\n    FranchiseReducer,\r\n    GamesReducer,\r\n    DateReducer\r\n  })","export const FranchiseReducer = (state = [], action) => {\r\n    switch(action.type){\r\n      case 'ADD_FRANCHISE':\r\n        return [...action.payload]\r\n      default:\r\n        return state\r\n    }\r\n  }","export const GamesReducer = (state = [], action) => {\r\n    let games = state.slice()\r\n    switch(action.type){\r\n      case 'ADD_GAME':\r\n        return [...state, action.payload]\r\n      case 'REMOVE_GAME':\r\n        let copy1 = state.slice(0, action.index)\r\n        let copy2 = state.slice(action.index+1)\r\n        copy1 = copy1.concat(copy2)\r\n        return copy1\r\n      case 'SWAP_MATCHUP':\r\n        let tempHolder = games[action.index].winner\r\n        games[action.index].winner = games[action.index].loser\r\n        games[action.index].loser = tempHolder\r\n        return [...games]\r\n      case 'SET_WINNER_INFO':\r\n        games[action.index].winner = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_INFO':\r\n        games[action.index].loser = action.payload\r\n        return [...games]\r\n      case 'SET_WINNER_RUNS':\r\n        games[action.index].winnerRuns = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_RUNS':\r\n        games[action.index].loserRuns = action.payload\r\n        return [...games]\r\n      case 'SET_VENUE':\r\n        games[action.index].venue = action.payload\r\n        return [...games]\r\n      case 'GET_GAMES':\r\n        return state\r\n      default:\r\n        return state  \r\n    }\r\n  }","import './App.css';\r\nimport Main from './containers/Main.js';\r\nimport {HashRouter, Switch, Link, Route} from \"react-router-dom\";\r\nimport FinalScores from './containers/FinalScores.js';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport App2 from './App2';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport { rootReducer } from './reducers/RootReducer.js';\r\n\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename =\"/\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle/>\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n            <Nav>\r\n              <Nav.Link as = {Link} to = \"/\"> Standings </Nav.Link>\r\n              <Nav.Link as = {Link} to = \"/games\"> Final Scores </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n            \r\n          </Navbar>\r\n        <Switch>\r\n          <Route exact path = \"/\">\r\n            <Main />\r\n          </Route>\r\n          <Route path = \"/games\">\r\n            <FinalScores />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}