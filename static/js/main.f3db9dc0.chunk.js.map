{"version":3,"sources":["components/Team.js","components/League.js","components/CompletedGames.js","components/Games.js","App.js","reportWebVitals.js","index.js"],"names":["Team","props","fixedGamesBack","gamesBack","toFixed","team","record","wins","losses","pct","streak","League","useState","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","mapStateToDummyComponent","state","league","map","item","teamId","prevState","reorganizeWins","sort","a","b","reverse","reorganizeLosses","reorganizeWinPercentage","reorganizeGamesBack","reorganizeAlpha","localeCompare","useEffect","results","fetch","method","accept","then","res","json","data","resultsAmerican","summary","slice","resultsNational","style","marginTop","color","height","colSpan","onClick","CompletedGames","date","split","formatDate","rest","className","stadium","join","concat","winner","winnerRuns","loser","loserRuns","Games","completeGameRecap","setCompleteGameRecap","filteredGameRecap","setFilteredGameRecap","name","runs","_id","Array","from","handleSearch","e","Object","keys","tempData","filter","toLowerCase","includes","target","value","key","onChange","placeholder","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3db9dc0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Team(props){\r\n\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.record}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n    \r\n}\r\n\r\nexport default Team;","import React,{useState, useEffect} from 'react';\r\nimport Team from './Team';\r\nimport { AiFillCaretUp, AiFillCaretDown} from \"react-icons/ai\";\r\nimport Loader from 'react-loader-spinner';\r\n\r\nfunction League(){\r\n    const [teams, setTeams] = useState({\r\n        american: [\r\n\r\n        ],\r\n        national: [\r\n\r\n        ]\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {    \r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: false,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {    \r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: false,\r\n            losses: true,\r\n            team: false\r\n        }\r\n\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect( () => {\r\n        let results\r\n        fetch(`https://api-mlb.herokuapp.com/`, {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.map(  (item) => \r\n                <Team \r\n                    key = {item.teamId}\r\n                    teamId = {item.teamId} \r\n                    team = {item.team} \r\n                    league = {item.league}\r\n                    record = {item.summary.record}\r\n                    wins = {item.summary.wins}\r\n                    losses = {item.summary.losses}\r\n                    pct = {item.summary.pct}\r\n                    gamesBack = {item.summary.gamesBack}\r\n                    streak = {item.summary.streak}\r\n                />)\r\n            results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n            let resultsAmerican = results.slice(0, 15)\r\n            let resultsNational = results.slice(-15)\r\n            setTeams({\r\n                american: resultsAmerican,\r\n                national: resultsNational\r\n            })\r\n            setLoading(false)\r\n        })\r\n    },[])\r\n\r\n    function mapStateToDummyComponent(state, league){\r\n        state = state.map((item) => \r\n        <Team \r\n            key = {item.props.teamId}\r\n            teamId = {item.props.teamId} \r\n            team = {item.props.team} \r\n            league = {item.props.league}\r\n            record = {item.props.record}\r\n            wins = {item.props.wins}\r\n            losses = {item.props.losses}\r\n            pct = {item.props.pct}\r\n            gamesBack = {item.props.gamesBack}\r\n            streak = {item.props.streak}\r\n        />)\r\n        if(league === 'american'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if(league === 'national'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    function reorganizeWins(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.wins - a.props.wins \r\n        })\r\n        if (!sortDirection[`${league}`].wins)\r\n            state.reverse()\r\n        \r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                wins: !prevState[`${league}`].wins\r\n            }\r\n        }))\r\n\r\n        mapStateToDummyComponent(state, league)\r\n    }\r\n\r\n    function reorganizeLosses(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.losses - a.props.losses \r\n        })\r\n        if (!sortDirection[`${league}`].losses)\r\n            state.reverse()\r\n        \r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                losses: !prevState[`${league}`].losses\r\n            }\r\n        }))\r\n\r\n        mapStateToDummyComponent(state, league)\r\n    }\r\n    \r\n    function reorganizeWinPercentage(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.pct - a.props.pct \r\n        })\r\n        if (!sortDirection[`${league}`].pct)\r\n            state.reverse()\r\n        \r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                pct: !prevState[`${league}`].pct\r\n            }\r\n        }))\r\n        mapStateToDummyComponent(state, league)\r\n    }\r\n\r\n    function reorganizeGamesBack(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            return b.props.gamesBack - a.props.gamesBack \r\n        })\r\n        if (!sortDirection[`${league}`].gamesBack)\r\n            state.reverse()\r\n\r\n        setSortDirection( (prevState)=> ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapStateToDummyComponent(state, league)\r\n    }\r\n\r\n    function reorganizeAlpha(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            if (sortDirection[`${league}`].team){\r\n                return a.props.team.localeCompare(b.props.team)\r\n            }else{\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n\r\n        setSortDirection( (prevState) => ({\r\n            ...prevState,\r\n            [`${league}`]:\r\n            {\r\n                ...prevState[`${league}`],\r\n                team: !prevState[`${league}`].team\r\n            }\r\n        }))\r\n        \r\n        mapStateToDummyComponent(state, league)\r\n    }\r\n\r\n    return( \r\n        <div> \r\n            {loading \r\n            ? <div style={{marginTop: '5%'}}> Loading <Loader color={'black'} height={60}/></div>\r\n            :\r\n            <div>\r\n                <table>\r\n                    <thead><tr><th colSpan=\"7\">American League</th></tr></thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"american\")}>{sortDirection.american.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Record</td>\r\n                            <td>Wins <button onClick ={() => reorganizeWins(\"american\")}> {sortDirection.american.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganizeLosses(\"american\")}> {sortDirection.american.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganizeWinPercentage(\"american\")}> {sortDirection.american.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganizeGamesBack(\"american\")}> {sortDirection.american.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.american}\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <thead><tr><th colSpan=\"7\">National League</th></tr></thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"national\")}>{sortDirection.national.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Record</td>\r\n                            <td>Wins <button onClick ={() => reorganizeWins(\"national\")}> {sortDirection.national.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganizeLosses(\"national\")}> {sortDirection.national.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganizeWinPercentage(\"national\")}> {sortDirection.national.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganizeGamesBack(\"national\")}> {sortDirection.national.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.national}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            }   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default League;","import React from 'react';\r\n\r\nfunction CompletedGames(props){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <div> {rest.join('/').concat('/', formatDate)} </div>\r\n            </div>\r\n            <div className = \"winner-container\"> \r\n                <strong> {props.winner} \r\n                    <div> {props.winnerRuns} </div>\r\n                </strong>\r\n            </div>\r\n            <div className = \"loser-container\"> {props.loser} \r\n                <div> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;","\r\nimport React, {useState, useEffect} from 'react';\r\nimport CompletedGames from './CompletedGames';\r\n\r\nfunction Games(){\r\n    const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    const [filteredGameRecap, setFilteredGameRecap] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect( () => {\r\n        let results = []\r\n        fetch(`https://api-mlb.herokuapp.com/regular-season`, {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.map( (item)=> <CompletedGames \r\n                key = {item._id}\r\n                date = {item.date}\r\n                stadium = {item.stadium}\r\n                winner = {item.winner.name}\r\n                winnerRuns = {item.winner.runs}\r\n                loser = {item.loser.name}\r\n                loserRuns = {item.loser.runs}\r\n            />)\r\n            setCompleteGameRecap(Array.from(results))\r\n            setLoading(false)\r\n            \r\n        })\r\n        \r\n    },[])\r\n\r\n    const handleSearch = (e) => {\r\n        setFilteredGameRecap(completeGameRecap)\r\n        let [date, stadium, winner, winnerRuns, loser, loserRuns] = Object.keys(completeGameRecap[0].props)\r\n        let tempData = completeGameRecap.filter( item => {\r\n            if (item.props[winner].toLowerCase().includes(e.target.value.toLowerCase()) \r\n                || item.props[loser].toLowerCase().includes(e.target.value.toLowerCase())\r\n                || item.props[date].includes(e.target.value.toLowerCase())\r\n                || item.props[stadium].toLowerCase().includes(e.target.value.toLowerCase())\r\n            ){\r\n                return (\r\n                    <CompletedGames \r\n                        key = {item.key}\r\n                        date = {item.props.date}\r\n                        stadium = {item.props.stadium}\r\n                        winner = {item.props.winner.name}\r\n                        winnerRuns = {item.props.winner.runs}\r\n                        loser = {item.props.loser.name}\r\n                        loserRuns = {item.props.loser.runs}/>\r\n                )\r\n            }\r\n        })\r\n        setFilteredGameRecap(tempData)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {loading\r\n                ?<div> loading </div> \r\n                : filteredGameRecap \r\n                    ?    \r\n                    <div >   \r\n                        <input onChange = {handleSearch} placeholder=\"Search for teams, stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {filteredGameRecap} \r\n                        </div> \r\n                    </div>\r\n                    :\r\n                    <div >   \r\n                        <input onChange = {handleSearch} placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {completeGameRecap} \r\n                        </div> \r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Games;","import './App.css';\r\nimport League from './components/League';\r\nimport {HashRouter, Switch, Link, Route} from \"react-router-dom\";\r\nimport Games from './components/Games';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename =\"/\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle/>\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n            <Nav>\r\n              <Nav.Link as = {Link} to = \"/\"> Standings </Nav.Link>\r\n              <Nav.Link as = {Link} to = \"/games\"> Final Scores </Nav.Link>\r\n              </Nav></Navbar.Collapse>\r\n            \r\n          </Navbar>\r\n        <Switch>\r\n          <Route exact path = \"/\">\r\n            <League />\r\n          </Route>\r\n          <Route path = \"/games\">\r\n            <Games />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}