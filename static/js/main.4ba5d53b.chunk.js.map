{"version":3,"sources":["components/Team.js","components/League.js","components/CompletedGames.js","components/Games.js","App.js","reportWebVitals.js","index.js"],"names":["Team","props","fixedGamesBack","gamesBack","toFixed","team","record","wins","losses","pct","streak","League","useState","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","reorganize","key","league","value","state","sort","a","b","prevState","map","item","teamId","reorganizeAlpha","localeCompare","useEffect","results","fetch","method","accept","then","res","json","data","resultsAmerican","summary","slice","resultsNational","style","marginTop","color","height","colSpan","onClick","CompletedGames","date","split","formatDate","rest","className","stadium","join","concat","winner","winnerRuns","loser","loserRuns","Games","completeGameRecap","setCompleteGameRecap","filteredGameRecap","setFilteredGameRecap","name","runs","_id","Array","from","handleSearch","e","Object","keys","tempData","filter","toLowerCase","includes","target","onChange","placeholder","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ba5d53b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Team(props){\r\n\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.record}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n    \r\n}\r\n\r\nexport default Team;","import React,{useState, useEffect} from 'react';\r\nimport Team from './Team';\r\nimport { AiFillCaretUp, AiFillCaretDown} from \"react-icons/ai\";\r\nimport Loader from 'react-loader-spinner';\r\n\r\nfunction League(){\r\n    const [teams, setTeams] = useState({\r\n        american: [\r\n\r\n        ],\r\n        national: [\r\n\r\n        ]\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {    \r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: false,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {    \r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: false,\r\n            losses: true,\r\n            team: false\r\n        }\r\n\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect( () => {\r\n        let results\r\n        fetch(`https://api-mlb.herokuapp.com/`, {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.map(  (item) => \r\n                <Team \r\n                    key = {item.teamId}\r\n                    teamId = {item.teamId} \r\n                    team = {item.team} \r\n                    league = {item.league}\r\n                    record = {item.summary.record}\r\n                    wins = {item.summary.wins}\r\n                    losses = {item.summary.losses}\r\n                    pct = {item.summary.pct}\r\n                    gamesBack = {item.summary.gamesBack}\r\n                    streak = {item.summary.streak}\r\n                />)\r\n            results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n            let resultsAmerican = results.slice(0, 15)\r\n            let resultsNational = results.slice(-15)\r\n            setTeams({\r\n                american: resultsAmerican,\r\n                national: resultsNational\r\n            })\r\n            setLoading(false)\r\n        })\r\n    },[])\r\n    \r\n    function reorganize(key, league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            if (sortDirection[`${league}`].[`${key}`]){\r\n                return b.props[`${key}`] - a.props[`${key}`] \r\n            }\r\n            else{\r\n                return a.props[`${key}`] - b.props[`${key}`]\r\n            }\r\n        })\r\n        let value\r\n        if (key === \"pct\"){\r\n            value = sortDirection[`${league}`].pct\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                [`${league}`]:\r\n                {\r\n                    ...prevState[`${league}`],\r\n                    pct: !value\r\n                }\r\n            }))\r\n        }\r\n        if (key === \"gamesBack\"){\r\n            value = sortDirection[`${league}`].gamesBack\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                [`${league}`]:\r\n                {\r\n                    ...prevState[`${league}`],\r\n                    gamesBack: !value\r\n                }\r\n            }))\r\n        }\r\n        if (key === \"wins\"){\r\n            value = sortDirection[`${league}`].wins\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                [`${league}`]:\r\n                {\r\n                    ...prevState[`${league}`],\r\n                    wins: !value\r\n                }\r\n            }))\r\n        }\r\n        if (key === \"losses\"){\r\n            value = sortDirection[`${league}`].losses\r\n            setSortDirection( (prevState)=> ({\r\n                ...prevState,\r\n                [`${league}`]:\r\n                {\r\n                    ...prevState[`${league}`],\r\n                    losses: !value\r\n                }\r\n            }))\r\n        }\r\n        state = state.map((item) => \r\n        <Team \r\n            key = {item.props.teamId}\r\n            teamId = {item.props.teamId} \r\n            team = {item.props.team} \r\n            league = {item.props.league}\r\n            record = {item.props.record}\r\n            wins = {item.props.wins}\r\n            losses = {item.props.losses}\r\n            pct = {item.props.pct}\r\n            gamesBack = {item.props.gamesBack}\r\n            streak = {item.props.streak}\r\n        />)\r\n        if(league === 'american'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if(league === 'national'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    function reorganizeAlpha(league){\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort( (a,b) => {\r\n            if (sortDirection[`${league}`].team){\r\n                return a.props.team.localeCompare(b.props.team)\r\n            }else{\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n        let value = sortDirection[`${league}`].team\r\n\r\n        setSortDirection( (prevState) => ({\r\n            ...prevState,\r\n            [`${league}`]:{\r\n                pct: prevState,\r\n                gamesBack: prevState,\r\n                wins: prevState,\r\n                losses: prevState,\r\n                team: !value \r\n            }\r\n        }))\r\n        \r\n        state = state.map((item) => \r\n        <Team \r\n            key = {item.props.teamId}\r\n            teamId = {item.props.teamId} \r\n            team = {item.props.team} \r\n            league = {item.props.league}\r\n            record = {item.props.record}\r\n            wins = {item.props.wins}\r\n            losses = {item.props.losses}\r\n            pct = {item.props.pct}\r\n            gamesBack = {item.props.gamesBack}\r\n            streak = {item.props.streak}\r\n        />)\r\n\r\n        if(league === 'american'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if(league === 'national'){\r\n            setTeams( (prevState) => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    return( \r\n        <div> \r\n            {loading \r\n            ? <div style={{marginTop: '5%'}}> Loading <Loader color={'black'} height={60}/></div>\r\n            :\r\n            <div>\r\n                <table>\r\n                    <thead><tr><th colSpan=\"7\">American League</th></tr></thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"american\")}>{sortDirection.american.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Record</td>\r\n                            <td>Wins <button onClick ={() => reorganize(\"wins\", \"american\")}> {sortDirection.american.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganize(\"losses\", \"american\")}> {sortDirection.american.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganize(\"pct\", \"american\")}> {sortDirection.american.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganize(\"gamesBack\", \"american\")}> {sortDirection.american.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.american}\r\n                    </tbody>\r\n                </table>\r\n                <table>\r\n                    <thead><tr><th colSpan=\"7\">National League</th></tr></thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Team<button onClick={() => reorganizeAlpha(\"national\")}>{sortDirection.national.team ? <AiFillCaretUp />: <AiFillCaretDown />  } </button></td>\r\n                            <td>Record</td>\r\n                            <td>Wins <button onClick ={() => reorganize(\"wins\", \"national\")}> {sortDirection.national.wins ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Losses <button onClick ={() => reorganize(\"losses\", \"national\")}> {sortDirection.national.losses ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Win % <button onClick ={() => reorganize(\"pct\", \"national\")}> {sortDirection.national.pct ? <AiFillCaretUp />: <AiFillCaretDown />  }</button></td>\r\n                            <td>Games Back <button onClick ={() => reorganize(\"gamesBack\", \"national\")}> {sortDirection.national.gamesBack ? <AiFillCaretUp />: <AiFillCaretDown />  }</button> </td>\r\n                            <td>Streak</td>\r\n                        </tr>\r\n                        {teams.national}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            }   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default League;","import React from 'react';\r\n\r\nfunction CompletedGames(props){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <div> {rest.join('/').concat('/', formatDate)} </div>\r\n            </div>\r\n            <div className = \"winner-container\"> \r\n                <strong> {props.winner} \r\n                    <div> {props.winnerRuns} </div>\r\n                </strong>\r\n            </div>\r\n            <div className = \"loser-container\"> {props.loser} \r\n                <div> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;","\r\nimport React, {useState, useEffect} from 'react';\r\nimport CompletedGames from './CompletedGames';\r\n\r\nfunction Games(){\r\n    const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    const [filteredGameRecap, setFilteredGameRecap] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect( () => {\r\n        let results = []\r\n        fetch(`https://api-mlb.herokuapp.com/regular-season`, {\r\n            method: 'GET',\r\n            accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.map( (item)=> <CompletedGames \r\n                key = {item._id}\r\n                date = {item.date}\r\n                stadium = {item.stadium}\r\n                winner = {item.winner.name}\r\n                winnerRuns = {item.winner.runs}\r\n                loser = {item.loser.name}\r\n                loserRuns = {item.loser.runs}\r\n            />)\r\n            setCompleteGameRecap(Array.from(results))\r\n            setLoading(false)\r\n            \r\n        })\r\n        \r\n    },[])\r\n\r\n    const handleSearch = (e) => {\r\n        setFilteredGameRecap(completeGameRecap)\r\n        let [date, stadium, winner, winnerRuns, loser, loserRuns] = Object.keys(completeGameRecap[0].props)\r\n        let tempData = completeGameRecap.filter( item => {\r\n            if (item.props[winner].toLowerCase().includes(e.target.value.toLowerCase()) \r\n                || item.props[loser].toLowerCase().includes(e.target.value.toLowerCase())\r\n                || item.props[date].includes(e.target.value.toLowerCase())\r\n                || item.props[stadium].toLowerCase().includes(e.target.value.toLowerCase())\r\n            ){\r\n                return (\r\n                    <CompletedGames \r\n                        key = {item.key}\r\n                        date = {item.props.date}\r\n                        stadium = {item.props.stadium}\r\n                        winner = {item.props.winner.name}\r\n                        winnerRuns = {item.props.winner.runs}\r\n                        loser = {item.props.loser.name}\r\n                        loserRuns = {item.props.loser.runs}/>\r\n                )\r\n            }\r\n        })\r\n        setFilteredGameRecap(tempData)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {loading\r\n                ?<div> loading </div> \r\n                : filteredGameRecap \r\n                    \r\n                    ?    \r\n                    <div >   \r\n                        <input onChange = {handleSearch} placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {filteredGameRecap} \r\n                        </div> \r\n                    </div>\r\n                    :\r\n                    <div >   \r\n                        <input onChange = {handleSearch} placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {completeGameRecap} \r\n                        </div> \r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Games;","import './App.css';\r\nimport League from './components/League';\r\nimport {HashRouter, Switch, Link, Route} from \"react-router-dom\";\r\nimport Games from './components/Games';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename =\"/\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle/>\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n            <Nav>\r\n              <Nav.Link as = {Link} to = \"/\"> Standings </Nav.Link>\r\n              <Nav.Link as = {Link} to = \"/games\"> Regular Season Final Scores </Nav.Link>\r\n              </Nav></Navbar.Collapse>\r\n            \r\n          </Navbar>\r\n        <Switch>\r\n          <Route exact path = \"/\">\r\n            <League />\r\n          </Route>\r\n          <Route path = \"/games\">\r\n            <Games />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}