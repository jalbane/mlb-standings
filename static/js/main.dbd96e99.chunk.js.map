{"version":3,"sources":["components/DisplayTeam.js","components/YearSelection/YearSelection.js","containers/Main.js","components/DisplayGame.js","Shared/Page/index.js","components/FinalScores/index.js","hooks/useGamesInfo.js","components/Games/index.js","containers/GamesContainer.js","components/Redux/Button.js","components/Redux/Output.js","components/Redux/GamesForm.js","App2.js","action.js","components/Redux/App2.js","reducers/DateReducer.js","reducers/RootReducer.js","reducers/FranchiseReducer.js","reducers/GamesReducer.js","App.js","index.js"],"names":["DisplayTeam","props","fixedGamesBack","gamesBack","toFixed","team","wins","losses","pct","streak","YearSelection","date","Date","id","htmlFor","type","defaultValue","Number","getFullYear","min","max","onChange","e","setQueryYear","target","value","Wrapper","styled","div","Main","useState","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","queryYear","mapTeamState","state","league","map","item","teamId","record","prevState","reorganizeWins","sort","a","b","reverse","reorganizeLosses","reorganizeWinPercentage","reorganizeGamesBack","reorganizeAlpha","localeCompare","useEffect","results","controller","AbortController","axios","get","signal","response","status","data","resultsAmerican","slice","resultsNational","fetchTeams","abort","style","marginTop","color","height","colSpan","onClick","CompletedGames","Page","children","FinalScores","Venue","useGamesInfo","React","setGameData","pageNumber","setPageNumber","useRef","console","log","warn","fetchService","Games","prev","GamesContainer","Button","handleEvent","index","Output","GamesForm","i","Index","required","list","name","winner","setWinnerInfo","hidden","Teams","loser","setLoserInfo","setWinnerRuns","setLoserRuns","setVenue","removeGame","swapMatchup","connect","MLBTeams","FranchiseReducer","GamesReducer","DateReducer","dispatch","addFranchise","arr","payload","addGame","winnerRuns","loserRuns","venue","obj","SET_VENUE","setDate","SET_DATE","getGames","displayOutput","setDisplayOutput","initTeamState","formatDate","split","year","join","fetch","then","res","json","className","placeholder","toISOString","onFocus","currentTarget","onBlur","preventDefault","handleDate","length","opponent","isMatchInterLeague","filter","division","matchUpFunc","printInterLeagueValue","printDivisionRivalValue","defaultDate","rootReducer","combineReducers","action","games","copy1","copy2","concat","tempHolder","Object","assign","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","to","exact","path","App2","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbd96e99.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DisplayTeam(props){\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n}\r\n\r\nexport default DisplayTeam;","import React from \"react\";\r\nimport './YearSelection.css'\r\n\r\nexport default function YearSelection(props) {\r\n  let date = new Date();\r\n  return (\r\n    <div id=\"year-input\">\r\n      <label htmlFor=\"year-input\">Select year</label>\r\n      <input\r\n        type=\"number\"\r\n        data-testid=\"year-select\"\r\n        defaultValue={Number(date.getFullYear())}\r\n        min={Number(2021)}\r\n        \r\n        max={Number(date.getFullYear())}\r\n        onChange={(e) => props.setQueryYear(e.target.value)}\r\n      ></input>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport DisplayTeam from '../components/DisplayTeam'\r\nimport { AiFillCaretUp, AiFillCaretDown } from 'react-icons/ai'\r\nimport Loader from 'react-loader-spinner'\r\nimport styled from 'styled-components'\r\nimport YearSelection from '../components/YearSelection/YearSelection'\r\nimport axios from 'axios'\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 0 auto;\r\n    padding-top: 1%;\r\n    padding-bottom: 1%;\r\n\r\n    & table {\r\n        margin-top: 0px;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    & table:nth-child(2) {\r\n        margin-top: 1%;\r\n    }\r\n\r\n    & table > thead > tr > th {\r\n        background-color: #bf0d3e;\r\n        color: white;\r\n        padding-left: 25px;\r\n    }\r\n\r\n    & table:nth-child(2) > thead > tr > th {\r\n        background-color: #041e42;\r\n    }\r\n`\r\n\r\nfunction Main() {\r\n    const [teams, setTeams] = useState({\r\n        american: [],\r\n        national: []\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        }\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    const [queryYear, setQueryYear] = useState(new Date().getFullYear())\r\n    useEffect(() => {\r\n        let results\r\n        const controller = new AbortController()\r\n\r\n        /* `https://api-mlb.herokuapp.com/` */\r\n        // fetch(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n        //     method: 'GET'\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => {\r\n        //     console.log(data)\r\n        //     results = data.map(  (item) =>\r\n        //         <DisplayTeam\r\n        //             key = {item.teamId}\r\n        //             teamId = {item.teamId}\r\n        //             team = {item.team}\r\n        //             league = {item.league}\r\n        //             record = {item.record}\r\n        //             wins = {item.wins}\r\n        //             losses = {item.losses}\r\n        //             pct = {item.pct}\r\n        //             gamesBack = {item.gamesBack}\r\n        //             streak = {item.streak}\r\n        //         />)\r\n        //     results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n        //     let resultsAmerican = results.slice(0, 15)\r\n        //     let resultsNational = results.slice(-15)\r\n        //     setTeams({\r\n        //         american: resultsAmerican,\r\n        //         national: resultsNational\r\n        //     })\r\n        //     setLoading(false)\r\n        // })\r\n        // .catch(err => {\r\n        //     if (err){\r\n        //         setLoading(false)\r\n        //     }\r\n        // })\r\n\r\n        const fetchTeams = async () => {\r\n            setLoading(true)\r\n            const response = await axios.get(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n                signal: controller.signal\r\n            })\r\n            if (response.status === 200) {\r\n                results = response.data.map(item => (\r\n                    <DisplayTeam\r\n                        key={item.teamId}\r\n                        teamId={item.teamId}\r\n                        team={item.team}\r\n                        league={item.league}\r\n                        record={item.record}\r\n                        wins={item.wins}\r\n                        losses={item.losses}\r\n                        pct={item.pct}\r\n                        gamesBack={item.gamesBack}\r\n                        streak={item.streak}\r\n                    />\r\n                ))\r\n                results = results.sort((a, b) => {\r\n                    return a.props.league - b.props.league\r\n                })\r\n                let resultsAmerican = results.slice(0, 15)\r\n                let resultsNational = results.slice(-15)\r\n                setTeams({\r\n                    american: resultsAmerican,\r\n                    national: resultsNational\r\n                })\r\n                setLoading(false)\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchTeams()\r\n\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [queryYear])\r\n\r\n    function mapTeamState(state, league) {\r\n        state = state.map(item => (\r\n            <DisplayTeam\r\n                key={item.props.teamId}\r\n                teamId={item.props.teamId}\r\n                team={item.props.team}\r\n                league={item.props.league}\r\n                record={item.props.record}\r\n                wins={item.props.wins}\r\n                losses={item.props.losses}\r\n                pct={item.props.pct}\r\n                gamesBack={item.props.gamesBack}\r\n                streak={item.props.streak}\r\n            />\r\n        ))\r\n        if (league === 'american') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if (league === 'national') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reorganizeWins handles sorting for # of wins and win percentage,\r\n     * because they are closely related. Also sorting wins in descending order\r\n     * will toggle the state for # of losses to display in ascending order.\r\n     * @param {*} league -- string for either american or national league\r\n     */\r\n    function reorganizeWins(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.wins - a.props.wins\r\n        })\r\n        if (!sortDirection[`${league}`].wins) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                wins: !prevState[`${league}`].wins,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeLosses(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.losses - a.props.losses\r\n        })\r\n        if (!sortDirection[`${league}`].losses) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                losses: !prevState[`${league}`].losses,\r\n                wins: prevState[`${league}`].losses,\r\n                pct: prevState[`${league}`].losses\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeWinPercentage(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.pct - a.props.pct\r\n        })\r\n        if (!sortDirection[`${league}`].pct) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                pct: !prevState[`${league}`].pct,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeGamesBack(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.gamesBack - a.props.gamesBack\r\n        })\r\n        if (!sortDirection[`${league}`].gamesBack) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                gamesBack: !prevState[`${league}`].gamesBack,\r\n                wins: prevState[`${league}`].gamesBack,\r\n                pct: prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeAlpha(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            if (sortDirection[`${league}`].team) {\r\n                return a.props.team.localeCompare(b.props.team)\r\n            } else {\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                team: !prevState[`${league}`].team\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            {loading ? (\r\n                <div style={{ marginTop: '5%' }}>\r\n                    {' '}\r\n                    Loading <Loader color={'black'} height={60} />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <YearSelection setQueryYear={setQueryYear} />\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"6\">American League</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Team\r\n                                    <button onClick={() => reorganizeAlpha('american')}>\r\n                                        {sortDirection.american.team ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}{' '}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Wins{' '}\r\n                                    <button onClick={() => reorganizeWins('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.wins ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Losses{' '}\r\n                                    <button onClick={() => reorganizeLosses('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.losses ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Win %{' '}\r\n                                    <button onClick={() => reorganizeWinPercentage('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.pct ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Games Back{' '}\r\n                                    <button onClick={() => reorganizeGamesBack('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.gamesBack ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>{' '}\r\n                                </td>\r\n                                <td>Streak</td>\r\n                            </tr>\r\n                            {teams.american}\r\n                        </tbody>\r\n                    </table>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"6\">National League</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Team\r\n                                    <button onClick={() => reorganizeAlpha('national')}>\r\n                                        {sortDirection.national.team ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}{' '}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Wins{' '}\r\n                                    <button onClick={() => reorganizeWins('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.wins ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Losses{' '}\r\n                                    <button onClick={() => reorganizeLosses('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.losses ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Win %{' '}\r\n                                    <button onClick={() => reorganizeWinPercentage('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.pct ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Games Back{' '}\r\n                                    <button onClick={() => reorganizeGamesBack('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.gamesBack ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>{' '}\r\n                                </td>\r\n                                <td>Streak</td>\r\n                            </tr>\r\n                            {teams.national}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\n\r\nfunction CompletedGames( {props} ){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <div> {rest.join('/').concat('/', formatDate)} </div>\r\n            </div>\r\n            <div className = \"info-container\"> \r\n                <div className=\"left\"> {props.winner}</div>\r\n                <div> vs </div>\r\n                <div className=\"right\"> {props.loser}  </div> \r\n            </div>\r\n            <div className = \"info-container\">\r\n                <div className=\"left\"> {props.winnerRuns} </div> \r\n                <div> - </div>\r\n                <div className=\"right\"> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;\r\n\r\n/**/","import React from \"react\";\r\n//import './style.css'\r\n\r\nconst Page = ({children}) => {\r\n    return <div>{children}</div>\r\n}\r\n\r\nexport default Page","import React from 'react'\r\n\r\nconst FinalScores = ({ children }) => {\r\n    return <>{children}</>\r\n}\r\nconst Venue = ({ children }) => {\r\n    return <>{children}</>\r\n}\r\n\r\nFinalScores.Venue = Venue\r\n\r\nexport default FinalScores","import React from 'react'\r\nimport axios from 'axios'\r\n\r\nconst useGamesInfo = () => {\r\n    const [completeGameRecap, setCompleteGameRecap] = React.useState()\r\n    const [gameData, setGameData] = React.useState()\r\n    const [loading, setLoading] = React.useState(true)\r\n    const [pageNumber, setPageNumber] = React.useState(0)\r\n    let maxPages = React.useRef(null)\r\n    // React.useEffect(() => {\r\n    //     let results = []\r\n    //     fetch(`https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}`, {\r\n    //         method: 'GET',\r\n    //         accept: \"*/*\"\r\n    //     })\r\n    //         .then(res => res.json())\r\n    //         .then(data => {\r\n    //             results = data.result.map((item, index) => {\r\n    //                 return {\r\n    //                     key: index,\r\n    //                     date: item.date,\r\n    //                     stadium: item.stadium,\r\n    //                     winner: item.winner.name,\r\n    //                     winnerRuns: item.winner.runs,\r\n    //                     loser: item.loser.name,\r\n    //                     loserRuns: item.loser.runs\r\n    //                 }\r\n    //             })\r\n    //             maxPages.current = data.pages\r\n    //             setCompleteGameRecap(Array.from(results))\r\n    //             setLegend(Array.from(results))\r\n    //             setLoading(false)\r\n    //         })\r\n    // }, [pageNumber])\r\n    React.useEffect(() => {\r\n        const controller = new AbortController()\r\n        const fetchService = async () => {    \r\n            console.log(loading)    \r\n            setLoading(true)\r\n            try {\r\n                const response = await axios.get(\r\n                    `https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}`,\r\n                    { signal: controller.signal }\r\n                )\r\n                if (response.status === 200) {\r\n                    setGameData(response)\r\n                    setLoading(false)\r\n                }\r\n            } catch (e) {\r\n                console.warn(`Error caught fetching game final scores: ${e}`)\r\n            }\r\n        }\r\n\r\n        fetchService()\r\n        //useEffect cleanup function\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [pageNumber])\r\n\r\n    // const handleSearch = e => {\r\n    //     if (e.target.value) {\r\n    //         let tempData = legend.filter(item => {\r\n    //             if (\r\n    //                 item.winner.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n    //                 item.loser.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n    //                 item.stadium.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n    //                 item.date.toLowerCase().includes(e.target.value.toLowerCase())\r\n    //             )\r\n    //                 return item\r\n    //             else return null\r\n    //         })\r\n    //         return setCompleteGameRecap(tempData)\r\n    //     }\r\n\r\n    //     return setCompleteGameRecap(legend)\r\n    // }\r\n    return { loading, setPageNumber }\r\n}\r\n\r\nexport default useGamesInfo\r\n","import React from \"react\";\r\nimport {FinalScores} from '../index'\r\nimport useGamesInfo from \"../../hooks/useGamesInfo\";\r\n\r\nconst Games = () => {\r\n    const {loading, setPageNumber } = useGamesInfo()\r\n    return (<>\r\n        Game final scores\r\n        { loading ? console.log('loading') : console.log('cleanup/done loading') }\r\n        <FinalScores>\r\n            asdf\r\n        </FinalScores>\r\n        <button onClick={() => setPageNumber(prev => ++prev)}>unmount</button>\r\n    </>)\r\n}\r\n\r\nexport default Games","\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport DisplayGame from '../components/DisplayGame';\r\nimport { Page } from '../Shared/index';\r\nimport { Games } from '../components/index'\r\n\r\nfunction GamesContainer(){\r\n    // const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    // const [loading, setLoading] = useState(true)\r\n    // const [legend, setLegend] = useState()\r\n    // const [pageNumber, setPageNumber] = useState(0)\r\n    // let maxPages = useRef(null)\r\n    // useEffect( () => {\r\n    //     let results = []\r\n    //     fetch(`https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}`, {\r\n    //         method: 'GET',\r\n    //         //accept: \"*/*\"\r\n    //     })\r\n    //     .then(res => res.json())\r\n    //     .then(data => {\r\n    //         results = data.result.map( (item, index)=> {return {\r\n    //             key: index,\r\n    //             date: item.date,\r\n    //             stadium: item.stadium,\r\n    //             winner: item.winner.name,\r\n    //             winnerRuns: item.winner.runs,\r\n    //             loser: item.loser.name,\r\n    //             loserRuns: item.loser.runs\r\n    //         }\r\n    //         })\r\n    //         maxPages.current = data.pages\r\n    //         setCompleteGameRecap(Array.from(results))\r\n    //         setLegend(Array.from(results))\r\n    //         setLoading(false)\r\n    //     })\r\n    // },[pageNumber])\r\n\r\n    // const handleSearch = (e) => {\r\n    //     if (e.target.value){\r\n    //         let tempData = legend.filter( (item) => {\r\n    //             if (item.winner.toLowerCase().includes(e.target.value.toLowerCase()) \r\n    //                 || item.loser.toLowerCase().includes(e.target.value.toLowerCase())\r\n    //                 || item.stadium.toLowerCase().includes(e.target.value.toLowerCase())\r\n    //                 || item.date.toLowerCase().includes(e.target.value.toLowerCase())\r\n    //             )\r\n    //                 return item\r\n    //             else \r\n    //                 return null;\r\n    //         })\r\n    //         return setCompleteGameRecap(tempData)\r\n            \r\n    //     }\r\n        \r\n    //     return setCompleteGameRecap(legend)\r\n    // }\r\n\r\n    return(\r\n        <Page>\r\n            <Games />\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default GamesContainer;","import React from \"react\";\r\n\r\nexport const Button = (props) => {\r\n  return (\r\n    <button type=\"button\" onClick={() => props.handleEvent(props.index)}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Output= (props) => {\r\n    return(\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from './Button.js';\r\n\r\nfunction GamesForm(props){\r\n    /*\r\n    function handleWinner(e, i){\r\n        props.setWinnerInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleLoser(e, i){\r\n        props.setLoserInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleWinnerRuns(e, i){\r\n        props.setWinnerRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleLoserRuns(e, i){\r\n        props.setLoserRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleVenue(e, i){\r\n        props.setVenue(e.target.value, i)\r\n    }*/\r\n\r\n    return(\r\n        <div>\r\n            {props.Games.map( (i, Index) => {\r\n                return (\r\n                    <form key={Index}>\r\n                        <label> Winner \r\n                        <input required list =\"teams\" name=\"winner\" id =\"winner\" value={i.winner} onChange={(e) => props.setWinnerInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden value=\"\"></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Loser -\r\n                            <input list=\"teams\" name=\"loser\" id =\"loser\" value={i.loser} onChange={(e) => props.setLoserInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Score\r\n                            <input type=\"text\" onChange = {(e)=> props.setWinnerRuns(e.target.value, Index)}></input>\r\n                            -\r\n                            <input type=\"text\" onChange = {(e)=> props.setLoserRuns(e.target.value, Index)}></input>\r\n                        </label>\r\n                        <label> Venue\r\n                            <select name = \"venue\" id =\"venue\" defaultValue=\"\" onChange = {(e)=> props.setVenue(e.target.value, Index)}>\r\n                                <option hidden></option>\r\n                                <option> American Family Field </option>\r\n                                <option> Angel Stadium </option>\r\n                                <option> Busch Stadium </option>\r\n                                <option> Camden Yards </option>\r\n                                <option> Chase Field </option>\r\n                                <option> Citi Field</option>\r\n                                <option> Citizens Bank Park</option>\r\n                                <option> Comerica Park</option>\r\n                                <option> Coors Field </option>\r\n                                <option> Dodger Stadium </option>\r\n                                <option> Fenway Park</option>\r\n                                <option> Globe Life Field</option>\r\n                                <option> Great American Ball Park</option>\r\n                                <option> Guaranteed Rate Field</option>\r\n                                <option> Kauffman Stadium</option>\r\n                                <option> loanDepot Park</option>\r\n                                <option> Minute Maid Park</option>\r\n                                <option> Nationals Park</option>\r\n                                <option> Oakland Coliseum</option>\r\n                                <option> Oracle Park</option>\r\n                                <option> Petco Park</option>\r\n                                <option> PNC Park</option>\r\n                                <option> Progressive Field</option>\r\n                                <option> Rogers Centre</option>\r\n                                <option> T-Mobile Park</option>\r\n                                <option> Target Field</option>\r\n                                <option> Tropicana Field</option>\r\n                                <option> Truist Park</option>\r\n                                <option> Wrigley Field</option>\r\n                                <option> Yankee Stadium</option>\r\n                            </select>\r\n                        </label>\r\n                        <Button handleEvent={i => props.removeGame(i)} index={Index}> Remove </Button>\r\n                        <Button handleEvent={i => props.swapMatchup(i)} index={Index}> Swap </Button>\r\n                    </form>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesForm;","import {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES} from './action.js'\r\nimport {connect} from 'react-redux'\r\nimport App2 from './components/Redux/App2';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    MLBTeams: state.FranchiseReducer,\r\n    Games: state.GamesReducer,\r\n    Date: state.DateReducer.date\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFranchise: (arr) => dispatch(ADD_FRANCHISE(arr)),\r\n    addGame: () => dispatch(ADD_GAME()),\r\n    removeGame: (index) => dispatch(REMOVE_GAME(index)),\r\n    swapMatchup: (index) => dispatch(SWAP_MATCHUP(index)),\r\n    setWinnerInfo: (obj, index) => dispatch(SET_WINNER_INFO(obj, index)),\r\n    setLoserInfo: (obj, index) => dispatch(SET_LOSER_INFO(obj, index)),\r\n    setWinnerRuns: (obj, index) => dispatch(SET_WINNER_RUNS(obj, index)),    \r\n    setLoserRuns: (obj, index) => dispatch(SET_LOSER_RUNS(obj, index)),\r\n    setVenue: (venue, index) => dispatch(SET_VENUE(venue, index)),\r\n    setDate: (Date) => dispatch(SET_DATE(Date)),\r\n    getGames: () => dispatch(GET_GAMES())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App2);","const ADD_FRANCHISE = (obj) => {\r\n    return {\r\n        type: 'ADD_FRANCHISE',\r\n        payload: obj\r\n    }\r\n}\r\n\r\nconst ADD_GAME = () => {\r\n    return {\r\n        type: 'ADD_GAME',\r\n        payload: {\r\n            winner: '',\r\n            loser: '',\r\n            winnerRuns: null,\r\n            loserRuns: null,\r\n            venue: ''\r\n        }\r\n    }\r\n}\r\n\r\nconst REMOVE_GAME = (i) => {\r\n    return {\r\n        type: 'REMOVE_GAME',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SWAP_MATCHUP = (i) => {\r\n    return {\r\n        type: 'SWAP_MATCHUP',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_INFO = (winner, i) => {\r\n    return {\r\n        type: 'SET_WINNER_INFO',\r\n        payload: winner,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_INFO = (loser, i) => {\r\n    return {\r\n        type: 'SET_LOSER_INFO',\r\n        payload: loser,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_WINNER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_LOSER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_VENUE = (venue, i) => {\r\n    return {\r\n        type: 'SET_VENUE',\r\n        payload: venue,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_DATE = (Date) => {\r\n    return{\r\n        type: 'SET_DATE',\r\n        payload: Date\r\n    }\r\n}\r\n\r\nconst GET_GAMES = () => {\r\n    return {\r\n        type: 'GET_GAMES'\r\n    }\r\n}\r\n\r\nexport {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES};","import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"./Button\";\r\nimport { Output } from \"./Output\";\r\nimport GamesForm from \"./GamesForm.js\";\r\n//import \"../App.css\";\r\n\r\nexport default function App(props) {\r\n  let [displayOutput, setDisplayOutput] = useState(false);\r\n\r\n  let initTeamState = props.addFranchise;\r\n  useEffect(() => {\r\n    fetch(`https://api-mlb.herokuapp.com?season=2022`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        initTeamState(data);\r\n      });\r\n  }, []);\r\n\r\n  function handleDate(e) {\r\n    e.preventDefault();\r\n    props.setDate(e.target.value);\r\n  }\r\n\r\n  function formatDate() {\r\n    let [year, ...date] = props.Date.split(\"-\");\r\n    date = date.join(\"-\");\r\n    date = [date, \"-\", ...year].join(\"\");\r\n    return date;\r\n  }\r\n\r\n  let matchUpFunc = function (winner, loser) {\r\n    let opponent = 1;\r\n    let isMatchInterLeague = (function () {\r\n      opponent = props.MLBTeams.filter((item) => {\r\n        return item.team === winner || item.team === loser ? item : null;\r\n      });\r\n      return checkLeague(opponent[0].league, opponent[1].league);\r\n    })();\r\n\r\n    function checkLeague(a, b) {\r\n      return a === b ? 0 : 1;\r\n    }\r\n\r\n    function checkDivisionString(a, b) {\r\n      return a === b ? 1 : 0;\r\n    }\r\n\r\n    function checkDivisionRivals() {\r\n      if (!isMatchInterLeague)\r\n        return checkDivisionString(opponent[0].division, opponent[1].division);\r\n      return 0;\r\n    }\r\n\r\n    return [isMatchInterLeague, checkDivisionRivals];\r\n  };\r\n\r\n  function generateOutput() {\r\n    let output = props.Games.map((item, i) => {\r\n      if (item.winner === \"\" || item.loser === \"\")\r\n        return null\r\n\r\n      let [printInterLeagueValue, printDivisionRivalValue] = matchUpFunc(item.winner,item.loser);\r\n      \r\n      return (\r\n        <Output key={i}>\r\n          {item.winner} vs {item.loser}, {item.venue}, {formatDate()},&nbsp;\r\n          {item.winnerRuns}, {item.loserRuns}, 0, {printDivisionRivalValue()},&nbsp;\r\n          {printInterLeagueValue},\r\n        </Output>\r\n      );\r\n    });\r\n\r\n    return output;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        placeholder={new Date().toISOString().split(\"T\")[0]}\r\n        onFocus={(e) => (e.currentTarget.type = \"date\")}\r\n        onBlur={(e) => (e.currentTarget.type = \"text\")}\r\n        onChange={(e) => handleDate(e)}\r\n      ></input>\r\n      {props.Games.length === 0 ? (\r\n        <div> No game data </div>\r\n      ) : (\r\n        <GamesForm\r\n          Games={props.Games}\r\n          Teams={props.MLBTeams}\r\n          setWinnerInfo={props.setWinnerInfo}\r\n          setLoserInfo={props.setLoserInfo}\r\n          setWinnerRuns={props.setWinnerRuns}\r\n          setLoserRuns={props.setLoserRuns}\r\n          setVenue={props.setVenue}\r\n          removeGame={props.removeGame}\r\n          swapMatchup={props.swapMatchup}\r\n        />\r\n      )}\r\n      <Button handleEvent={props.addGame}> Enter another game </Button>\r\n      <Button handleEvent={() => setDisplayOutput(!displayOutput)}>\r\n        Toggle output\r\n      </Button>\r\n      {displayOutput ? generateOutput() : () => props.getGames}\r\n\r\n    </div>\r\n  );\r\n}\r\n /*\r\n * let myvar = new Date()\r\n    console.log myvar\r\n    outputs: Fri Nov 05 2021 00:46:17 GMT-0400 (Eastern Daylight Time)\r\n\r\n    Date.parse(myvar)\r\n    outputs: 1636087577000\r\n\r\n    let holdms = Date.parse(myvar)\r\n\r\n    let correctedDate = holdms - (60000* myvar.getTimezoneOffset())\r\n\r\n    correctedDate = new Date(correctedDate)\r\n    outputs: Thu Nov 04 2021 20:46:17 GMT-0400 (Eastern Daylight Time)\r\n */","const defaultDate = new Date()\r\n\r\nexport const DateReducer = (state= {date: defaultDate.toISOString().split('T')[0]}, action) => {\r\n  switch(action.type){\r\n    case 'SET_DATE':\r\n      return Object.assign({}, {date: action.payload});\r\n    default: \r\n      return state;\r\n  }\r\n}","import {DateReducer} from './DateReducer.js' \r\nimport {GamesReducer} from './GamesReducer.js' \r\nimport {FranchiseReducer} from './FranchiseReducer.js' \r\nimport  {combineReducers}  from 'redux';\r\n\r\nexport const rootReducer = combineReducers({\r\n    FranchiseReducer,\r\n    GamesReducer,\r\n    DateReducer\r\n  })","export const FranchiseReducer = (state = [], action) => {\r\n    switch(action.type){\r\n      case 'ADD_FRANCHISE':\r\n        return [...action.payload]\r\n      default:\r\n        return state\r\n    }\r\n  }","export const GamesReducer = (state = [], action) => {\r\n    let games = state.slice()\r\n    switch(action.type){\r\n      case 'ADD_GAME':\r\n        return [...state, action.payload]\r\n      case 'REMOVE_GAME':\r\n        let copy1 = state.slice(0, action.index)\r\n        let copy2 = state.slice(action.index+1)\r\n        copy1 = copy1.concat(copy2)\r\n        return copy1\r\n      case 'SWAP_MATCHUP':\r\n        let tempHolder = games[action.index].winner\r\n        games[action.index].winner = games[action.index].loser\r\n        games[action.index].loser = tempHolder\r\n        return [...games]\r\n      case 'SET_WINNER_INFO':\r\n        games[action.index].winner = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_INFO':\r\n        games[action.index].loser = action.payload\r\n        return [...games]\r\n      case 'SET_WINNER_RUNS':\r\n        games[action.index].winnerRuns = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_RUNS':\r\n        games[action.index].loserRuns = action.payload\r\n        return [...games]\r\n      case 'SET_VENUE':\r\n        games[action.index].venue = action.payload\r\n        return [...games]\r\n      case 'GET_GAMES':\r\n        return state\r\n      default:\r\n        return state  \r\n    }\r\n  }","import './App.css';\r\nimport Main from './containers/Main.js';\r\nimport {HashRouter, Switch, Link, Route} from \"react-router-dom\";\r\nimport GamesContainer from './containers/GamesContainer.js';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport App2 from './App2';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport { rootReducer } from './reducers/RootReducer.js';\r\n\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename =\"/\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle/>\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n            <Nav>\r\n              <Nav.Link as = {Link} to = \"/\"> Standings </Nav.Link>\r\n              <Nav.Link as = {Link} to = \"/games\"> Final Scores </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n            \r\n          </Navbar>\r\n        <Switch>\r\n          <Route exact path = \"/\">\r\n            <Main />\r\n          </Route>\r\n          <Route path = \"/games\">\r\n            <GamesContainer />\r\n          </Route>\r\n          <Route path = \"/admin\">\r\n            <Provider store={store}>\r\n              <App2 />\r\n            </Provider>\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}