{"version":3,"sources":["components/DisplayTeam.js","components/YearSelection/YearSelection.js","containers/Main.js","components/DisplayGame.js","components/FinalScores/index.js","containers/GamesContainer.js","components/Redux/Button.js","components/Redux/Output.js","components/Redux/GamesForm.js","App2.js","action.js","components/Redux/App2.js","reducers/DateReducer.js","reducers/RootReducer.js","reducers/FranchiseReducer.js","reducers/GamesReducer.js","App.js","index.js"],"names":["DisplayTeam","props","fixedGamesBack","gamesBack","toFixed","team","wins","losses","pct","streak","YearSelection","setQueryYear","queryYear","date","Date","id","htmlFor","type","min","Number","value","max","getFullYear","onChange","e","target","Wrapper","styled","div","Main","useState","american","national","teams","setTeams","sortDirection","setSortDirection","loading","setLoading","mapTeamState","state","league","map","item","teamId","record","prevState","reorganizeWins","sort","a","b","reverse","reorganizeLosses","reorganizeWinPercentage","reorganizeGamesBack","reorganizeAlpha","localeCompare","useEffect","results","controller","AbortController","axios","get","signal","response","status","data","resultsAmerican","slice","resultsNational","fetchTeams","abort","style","marginTop","color","height","colSpan","onClick","CompletedGames","split","formatDate","rest","className","stadium","join","concat","winner","loser","winnerRuns","loserRuns","FinalScores","children","Venue","GamesContainer","completeGameRecap","setCompleteGameRecap","legend","setLegend","pageNumber","setPageNumber","maxPages","useRef","fetch","method","then","res","json","result","index","key","name","runs","current","pages","Array","from","tempData","filter","toLowerCase","includes","placeholder","DisplayGame","Button","handleEvent","Output","GamesForm","Games","i","Index","required","list","setWinnerInfo","hidden","Teams","setLoserInfo","setWinnerRuns","setLoserRuns","defaultValue","venue","setVenue","removeGame","swapMatchup","connect","MLBTeams","FranchiseReducer","GamesReducer","DateReducer","dispatch","addFranchise","arr","payload","addGame","obj","console","log","SET_VENUE","setDate","SET_DATE","getGames","displayOutput","setDisplayOutput","file","setFile","csvArray","setCsvArray","csvFile","reader","FileReader","onload","text","readAsText","readFile","length","test","trimStart","trimEnd","initTeamState","year","accept","files","toISOString","onFocus","currentTarget","onBlur","preventDefault","handleDate","opponent","isMatchInterLeague","division","matchUpFunc","printInterLeagueValue","printDivisionRivalValue","defaultDate","rootReducer","combineReducers","action","games","copy1","copy2","tempHolder","Object","assign","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","Navbar","expand","bg","Toggle","Collapse","Nav","Link","as","to","exact","path","App2","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.326339fd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DisplayTeam(props){\r\n\r\n    let fixedGamesBack = props.gamesBack.toFixed(1)\r\n    return (\r\n        <tr>\r\n            <td>{props.team}</td>\r\n            <td>{props.wins}</td>\r\n            <td>{props.losses}</td>\r\n            <td>{props.pct.toFixed(3)}</td>\r\n            <td>{fixedGamesBack < 0.5 ? '-' : fixedGamesBack }</td>\r\n            <td>{props.streak}</td>\r\n        </tr>\r\n        )\r\n}\r\n\r\nexport default DisplayTeam;","import React from \"react\";\r\nimport './YearSelection.css'\r\n\r\nexport default function YearSelection({setQueryYear, queryYear}) {\r\n  let date = new Date();\r\n  return (\r\n    <div id=\"year-input\">\r\n      <label htmlFor=\"year-input\">Select year</label>\r\n      <input\r\n        type=\"number\"\r\n        data-testid=\"year-select\"\r\n        min={Number(2021)}\r\n        value={queryYear}\r\n        max={Number(date.getFullYear())}\r\n        onChange={(e) => setQueryYear(e.target.value)}\r\n      ></input>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport DisplayTeam from '../components/DisplayTeam'\r\nimport { AiFillCaretUp, AiFillCaretDown } from 'react-icons/ai'\r\nimport Loader from 'react-loader-spinner'\r\nimport styled from 'styled-components'\r\nimport YearSelection from '../components/YearSelection/YearSelection'\r\nimport axios from 'axios'\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 0 auto;\r\n    padding-top: 1%;\r\n    padding-bottom: 1%;\r\n\r\n    & table {\r\n        margin-top: 0px;\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    & table:nth-child(2) {\r\n        margin-top: 1%;\r\n    }\r\n\r\n    & table > thead > tr > th {\r\n        background-color: #bf0d3e;\r\n        color: white;\r\n        padding-left: 25px;\r\n    }\r\n\r\n    & table:nth-child(2) > thead > tr > th {\r\n        background-color: #041e42;\r\n    }\r\n`\r\n\r\nfunction Main() {\r\n    const [teams, setTeams] = useState({\r\n        american: [],\r\n        national: []\r\n    })\r\n    const [sortDirection, setSortDirection] = useState({\r\n        american: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        },\r\n        national: {\r\n            pct: true,\r\n            gamesBack: true,\r\n            wins: true,\r\n            losses: true,\r\n            team: false\r\n        }\r\n    })\r\n    const [loading, setLoading] = useState(true)\r\n    const [queryYear, setQueryYear] = useState(new Date().getFullYear())\r\n    useEffect(() => {\r\n        let results\r\n        const controller = new AbortController()\r\n\r\n        /* `https://api-mlb.herokuapp.com/` */\r\n        // fetch(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n        //     method: 'GET'\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => {\r\n        //     console.log(data)\r\n        //     results = data.map(  (item) =>\r\n        //         <DisplayTeam\r\n        //             key = {item.teamId}\r\n        //             teamId = {item.teamId}\r\n        //             team = {item.team}\r\n        //             league = {item.league}\r\n        //             record = {item.record}\r\n        //             wins = {item.wins}\r\n        //             losses = {item.losses}\r\n        //             pct = {item.pct}\r\n        //             gamesBack = {item.gamesBack}\r\n        //             streak = {item.streak}\r\n        //         />)\r\n        //     results = results.sort( (a,b) => {return a.props.league - b.props.league} )\r\n        //     let resultsAmerican = results.slice(0, 15)\r\n        //     let resultsNational = results.slice(-15)\r\n        //     setTeams({\r\n        //         american: resultsAmerican,\r\n        //         national: resultsNational\r\n        //     })\r\n        //     setLoading(false)\r\n        // })\r\n        // .catch(err => {\r\n        //     if (err){\r\n        //         setLoading(false)\r\n        //     }\r\n        // })\r\n\r\n        const fetchTeams = async () => {\r\n            setLoading(true)\r\n            const response = await axios.get(`https://api-mlb.herokuapp.com/?season=${queryYear}`, {\r\n                signal: controller.signal\r\n            })\r\n            if (response.status === 200) {\r\n                results = response.data.map(item => (\r\n                    <DisplayTeam\r\n                        key={item.teamId}\r\n                        teamId={item.teamId}\r\n                        team={item.team}\r\n                        league={item.league}\r\n                        record={item.record}\r\n                        wins={item.wins}\r\n                        losses={item.losses}\r\n                        pct={item.pct}\r\n                        gamesBack={item.gamesBack}\r\n                        streak={item.streak}\r\n                    />\r\n                ))\r\n                results = results.sort((a, b) => {\r\n                    return a.props.league - b.props.league\r\n                })\r\n                let resultsAmerican = results.slice(0, 15)\r\n                let resultsNational = results.slice(-15)\r\n                setTeams({\r\n                    american: resultsAmerican,\r\n                    national: resultsNational\r\n                })\r\n                setLoading(false)\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchTeams()\r\n\r\n        return () => {\r\n            controller.abort()\r\n        }\r\n    }, [queryYear])\r\n\r\n    function mapTeamState(state, league) {\r\n        state = state.map(item => (\r\n            <DisplayTeam\r\n                key={item.props.teamId}\r\n                teamId={item.props.teamId}\r\n                team={item.props.team}\r\n                league={item.props.league}\r\n                record={item.props.record}\r\n                wins={item.props.wins}\r\n                losses={item.props.losses}\r\n                pct={item.props.pct}\r\n                gamesBack={item.props.gamesBack}\r\n                streak={item.props.streak}\r\n            />\r\n        ))\r\n        if (league === 'american') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                american: state\r\n            }))\r\n        }\r\n        if (league === 'national') {\r\n            setTeams(prevState => ({\r\n                ...prevState,\r\n                national: state\r\n            }))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reorganizeWins handles sorting for # of wins and win percentage,\r\n     * because they are closely related. Also sorting wins in descending order\r\n     * will toggle the state for # of losses to display in ascending order.\r\n     * @param {*} league -- string for either american or national league\r\n     */\r\n    function reorganizeWins(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.wins - a.props.wins\r\n        })\r\n        if (!sortDirection[`${league}`].wins) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                wins: !prevState[`${league}`].wins,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeLosses(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.losses - a.props.losses\r\n        })\r\n        if (!sortDirection[`${league}`].losses) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                losses: !prevState[`${league}`].losses,\r\n                wins: prevState[`${league}`].losses,\r\n                pct: prevState[`${league}`].losses\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeWinPercentage(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.pct - a.props.pct\r\n        })\r\n        if (!sortDirection[`${league}`].pct) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                pct: !prevState[`${league}`].pct,\r\n                losses: !prevState[`${league}`].losses,\r\n                gamesBack: !prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeGamesBack(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            return b.props.gamesBack - a.props.gamesBack\r\n        })\r\n        if (!sortDirection[`${league}`].gamesBack) state.reverse()\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                gamesBack: !prevState[`${league}`].gamesBack,\r\n                wins: prevState[`${league}`].gamesBack,\r\n                pct: prevState[`${league}`].gamesBack\r\n            }\r\n        }))\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    function reorganizeAlpha(league) {\r\n        let state = [...teams[`${league}`]]\r\n        state = state.sort((a, b) => {\r\n            if (sortDirection[`${league}`].team) {\r\n                return a.props.team.localeCompare(b.props.team)\r\n            } else {\r\n                return b.props.team.localeCompare(a.props.team)\r\n            }\r\n        })\r\n\r\n        setSortDirection(prevState => ({\r\n            ...prevState,\r\n            [`${league}`]: {\r\n                ...prevState[`${league}`],\r\n                team: !prevState[`${league}`].team\r\n            }\r\n        }))\r\n\r\n        mapTeamState(state, league)\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            {loading ? (\r\n                <div style={{ marginTop: '5%' }}>\r\n                    {' '}\r\n                    Loading <Loader color={'black'} height={60} />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <YearSelection setQueryYear={setQueryYear} queryYear={queryYear}/>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"6\">American League</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Team\r\n                                    <button onClick={() => reorganizeAlpha('american')}>\r\n                                        {sortDirection.american.team ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}{' '}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Wins{' '}\r\n                                    <button onClick={() => reorganizeWins('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.wins ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Losses{' '}\r\n                                    <button onClick={() => reorganizeLosses('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.losses ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Win %{' '}\r\n                                    <button onClick={() => reorganizeWinPercentage('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.pct ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Games Back{' '}\r\n                                    <button onClick={() => reorganizeGamesBack('american')}>\r\n                                        {' '}\r\n                                        {sortDirection.american.gamesBack ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>{' '}\r\n                                </td>\r\n                                <td>Streak</td>\r\n                            </tr>\r\n                            {teams.american}\r\n                        </tbody>\r\n                    </table>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"6\">National League</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Team\r\n                                    <button onClick={() => reorganizeAlpha('national')}>\r\n                                        {sortDirection.national.team ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}{' '}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Wins{' '}\r\n                                    <button onClick={() => reorganizeWins('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.wins ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Losses{' '}\r\n                                    <button onClick={() => reorganizeLosses('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.losses ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Win %{' '}\r\n                                    <button onClick={() => reorganizeWinPercentage('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.pct ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>\r\n                                </td>\r\n                                <td>\r\n                                    Games Back{' '}\r\n                                    <button onClick={() => reorganizeGamesBack('national')}>\r\n                                        {' '}\r\n                                        {sortDirection.national.gamesBack ? (\r\n                                            <AiFillCaretUp />\r\n                                        ) : (\r\n                                            <AiFillCaretDown />\r\n                                        )}\r\n                                    </button>{' '}\r\n                                </td>\r\n                                <td>Streak</td>\r\n                            </tr>\r\n                            {teams.national}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\n\r\nfunction CompletedGames( {props} ){\r\n    let [formatDate, ...rest] = props.date.split('T')[0].split('-')\r\n\r\n    return (\r\n        <div className = \"game-container\">\r\n            <div className = \"stadium-date-container\">   \r\n                <div> {props.stadium} </div>\r\n                <div> {rest.join('/').concat('/', formatDate)} </div>\r\n            </div>\r\n            <div className = \"info-container\"> \r\n                <div className=\"left\"> {props.winner}</div>\r\n                <div> vs </div>\r\n                <div className=\"right\"> {props.loser}  </div> \r\n            </div>\r\n            <div className = \"info-container\">\r\n                <div className=\"left\"> {props.winnerRuns} </div> \r\n                <div> - </div>\r\n                <div className=\"right\"> {props.loserRuns} </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompletedGames;\r\n\r\n/**/","import React from 'react'\r\n\r\nconst FinalScores = ({ children }) => {\r\n    return <>{children}</>\r\n}\r\nconst Venue = ({ children }) => {\r\n    return <>{children}</>\r\n}\r\n\r\nFinalScores.Venue = Venue\r\n\r\nexport default FinalScores","\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport DisplayGame from '../components/DisplayGame';\r\nimport { Page } from '../Shared/index';\r\nimport { Games } from '../components/index'\r\nimport YearSelection from '../components/YearSelection/YearSelection';\r\n\r\nfunction GamesContainer(){\r\n    const [completeGameRecap, setCompleteGameRecap] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n    const [legend, setLegend] = useState()\r\n    const [pageNumber, setPageNumber] = useState(0)\r\n    const [queryYear, setQueryYear] = useState(new Date().getFullYear())\r\n    let maxPages = useRef(null)\r\n    useEffect( () => {\r\n        let results = []\r\n        fetch(`https://api-mlb.herokuapp.com/regular-season/page?number=${pageNumber}&season=${queryYear}`, {\r\n            method: 'GET',\r\n            //accept: \"*/*\"\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            results = data.result.map( (item, index)=> {return {\r\n                key: index,\r\n                date: item.date,\r\n                stadium: item.stadium,\r\n                winner: item.winner.name,\r\n                winnerRuns: item.winner.runs,\r\n                loser: item.loser.name,\r\n                loserRuns: item.loser.runs\r\n            }\r\n            })\r\n            maxPages.current = data.pages\r\n            setCompleteGameRecap(Array.from(results))\r\n            setLegend(Array.from(results))\r\n            setLoading(false)\r\n        })\r\n    },[pageNumber, queryYear])\r\n\r\n    const handleSearch = (e) => {\r\n        if (e.target.value){\r\n            let tempData = legend.filter( (item) => {\r\n                if (item.winner.toLowerCase().includes(e.target.value.toLowerCase()) \r\n                    || item.loser.toLowerCase().includes(e.target.value.toLowerCase())\r\n                    || item.stadium.toLowerCase().includes(e.target.value.toLowerCase())\r\n                    || item.date.toLowerCase().includes(e.target.value.toLowerCase())\r\n                )\r\n                    return item\r\n                else \r\n                    return null;\r\n            })\r\n            return setCompleteGameRecap(tempData)\r\n            \r\n        }\r\n        \r\n        return setCompleteGameRecap(legend)\r\n    }\r\n\r\n    return(\r\n        // <Page>\r\n        //     <Games />\r\n        // </Page>\r\n        <div>\r\n            { loading\r\n                ? <div> loading </div> \r\n                : \r\n                    <div >   \r\n                        <YearSelection queryYear={queryYear} setQueryYear={setQueryYear}/>\r\n                        <input onChange = {handleSearch} placeholder=\"Search for Teams, Stadiums or dates (mm-dd)\"/>\r\n                        <div className = \"layout-container\"> \r\n                            {completeGameRecap.map( (item, index) => <DisplayGame key={index} props={item} /> ) }\r\n                        </div>                         \r\n                        <div className=\"page-bar\">\r\n                            <button onClick={() => pageNumber ? setPageNumber(  prevState => prevState - 1 ): 0 }> <strong> Go back </strong> </button>\r\n                            <div className=\"page-number\"> Page {pageNumber + 1} out of {maxPages.current + 1} </div>\r\n                            <button onClick={() => pageNumber === maxPages.current? null : setPageNumber(prevState => prevState + 1)}> <strong> Next page </strong> </button>\r\n                        </div>\r\n                    </div>\r\n            }\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesContainer;","import React from \"react\";\r\n\r\nexport const Button = (props) => {\r\n  return (\r\n    <button type=\"button\" onClick={() => props.handleEvent(props.index)}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Output= (props) => {\r\n    return(\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from './Button.js';\r\n\r\nfunction GamesForm(props){\r\n    /*\r\n    function handleWinner(e, i){\r\n        props.setWinnerInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleLoser(e, i){\r\n        props.setLoserInfo(String(e.target.value), i)\r\n    }\r\n\r\n    function handleWinnerRuns(e, i){\r\n        props.setWinnerRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleLoserRuns(e, i){\r\n        props.setLoserRuns(e.target.value, i)\r\n    }\r\n\r\n    function handleVenue(e, i){\r\n        props.setVenue(e.target.value, i)\r\n    }*/\r\n\r\n    return(\r\n        <div>\r\n            {props.Games.map( (i, Index) => {\r\n                return (\r\n                    <form key={Index}>\r\n                        <label> Winner \r\n                        <input required list =\"teams\" name=\"winner\" id =\"winner\" value={i.winner} onChange={(e) => props.setWinnerInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden value=\"\"></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Loser -\r\n                            <input list=\"teams\" name=\"loser\" id =\"loser\" value={i.loser} onChange={(e) => props.setLoserInfo(e.target.value, Index)}/> \r\n                                <datalist id=\"teams\">\r\n                                <option hidden></option>\r\n                                {props.Teams.map( (i, index) => (\r\n                                    <option key={index} value={props.Teams[index].team}>\r\n                                        {props.Teams[index].team}\r\n                                    </option>\r\n                                ))}\r\n                                </datalist>\r\n                        </label>\r\n                        <label> Score\r\n                            <input type=\"text\" value={i?.winnerRuns} onChange = {(e)=> props.setWinnerRuns(e.target.value, Index)}></input>\r\n                            -\r\n                            <input type=\"text\" value={i?.loserRuns} onChange = {(e)=> props.setLoserRuns(e.target.value, Index)}></input>\r\n                        </label>\r\n                        <label> Venue\r\n                            <select name = \"venue\" id =\"venue\" defaultValue={i?.venue} onChange = {(e)=> props.setVenue(e.target.value, Index)}>\r\n                                <option hidden></option>\r\n                                <option> American Family Field </option>\r\n                                <option> Angel Stadium </option>\r\n                                <option> Busch Stadium </option>\r\n                                <option> Camden Yards </option>\r\n                                <option> Chase Field </option>\r\n                                <option> Citi Field</option>\r\n                                <option> Citizens Bank Park</option>\r\n                                <option> Comerica Park</option>\r\n                                <option> Coors Field </option>\r\n                                <option> Dodger Stadium </option>\r\n                                <option> Fenway Park</option>\r\n                                <option> Globe Life Field</option>\r\n                                <option> Great American Ball Park</option>\r\n                                <option> Guaranteed Rate Field</option>\r\n                                <option> Kauffman Stadium</option>\r\n                                <option> loanDepot Park</option>\r\n                                <option> Minute Maid Park</option>\r\n                                <option> Nationals Park</option>\r\n                                <option> Oakland Coliseum</option>\r\n                                <option> Oracle Park</option>\r\n                                <option> Petco Park</option>\r\n                                <option> PNC Park</option>\r\n                                <option> Progressive Field</option>\r\n                                <option> Rogers Centre</option>\r\n                                <option> T-Mobile Park</option>\r\n                                <option> Target Field</option>\r\n                                <option> Tropicana Field</option>\r\n                                <option> Truist Park</option>\r\n                                <option> Wrigley Field</option>\r\n                                <option> Yankee Stadium</option>\r\n                            </select>\r\n                        </label>\r\n                        <Button handleEvent={i => props.removeGame(i)} index={Index}> Remove </Button>\r\n                        <Button handleEvent={i => props.swapMatchup(i)} index={Index}> Swap </Button>\r\n                    </form>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamesForm;","import {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES} from './action.js'\r\nimport {connect} from 'react-redux'\r\nimport App2 from './components/Redux/App2';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    MLBTeams: state.FranchiseReducer,\r\n    Games: state.GamesReducer,\r\n    Date: state.DateReducer.date\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFranchise: (arr) => dispatch(ADD_FRANCHISE(arr)),\r\n    addGame: () => dispatch(ADD_GAME()),\r\n    removeGame: (index) => dispatch(REMOVE_GAME(index)),\r\n    swapMatchup: (index) => dispatch(SWAP_MATCHUP(index)),\r\n    setWinnerInfo: (obj, index) => dispatch(SET_WINNER_INFO(obj, index)),\r\n    setLoserInfo: (obj, index) => dispatch(SET_LOSER_INFO(obj, index)),\r\n    setWinnerRuns: (obj, index) => dispatch(SET_WINNER_RUNS(obj, index)),    \r\n    setLoserRuns: (obj, index) => dispatch(SET_LOSER_RUNS(obj, index)),\r\n    setVenue: (venue, index) => dispatch(SET_VENUE(venue, index)),\r\n    setDate: (Date) => dispatch(SET_DATE(Date)),\r\n    getGames: () => dispatch(GET_GAMES())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App2);","const ADD_FRANCHISE = (obj) => {\r\n    return {\r\n        type: 'ADD_FRANCHISE',\r\n        payload: obj\r\n    }\r\n}\r\n\r\nconst ADD_GAME = () => {\r\n    return {\r\n        type: 'ADD_GAME',\r\n        payload: {\r\n            winner: '',\r\n            loser: '',\r\n            winnerRuns: null,\r\n            loserRuns: null,\r\n            venue: ''\r\n        }\r\n    }\r\n}\r\n\r\nconst REMOVE_GAME = (i) => {\r\n    return {\r\n        type: 'REMOVE_GAME',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SWAP_MATCHUP = (i) => {\r\n    return {\r\n        type: 'SWAP_MATCHUP',\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_INFO = (winner, i) => {\r\n    console.log(winner, i)\r\n    return {\r\n        type: 'SET_WINNER_INFO',\r\n        payload: winner,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_INFO = (loser, i) => {\r\n    return {\r\n        type: 'SET_LOSER_INFO',\r\n        payload: loser,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_WINNER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_WINNER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_LOSER_RUNS = (runs, i) => {\r\n    return {\r\n        type: 'SET_LOSER_RUNS',\r\n        payload: runs,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_VENUE = (venue, i) => {\r\n    return {\r\n        type: 'SET_VENUE',\r\n        payload: venue,\r\n        index: i\r\n    }\r\n}\r\n\r\nconst SET_DATE = (Date) => {\r\n    return{\r\n        type: 'SET_DATE',\r\n        payload: Date\r\n    }\r\n}\r\n\r\nconst GET_GAMES = () => {\r\n    return {\r\n        type: 'GET_GAMES'\r\n    }\r\n}\r\n\r\nexport {ADD_FRANCHISE, ADD_GAME, REMOVE_GAME, SWAP_MATCHUP, SET_WINNER_INFO, SET_LOSER_INFO, SET_WINNER_RUNS, SET_LOSER_RUNS, SET_VENUE, SET_DATE, GET_GAMES};","import React, { useEffect, useState } from 'react'\r\nimport { Button } from './Button'\r\nimport { Output } from './Output'\r\nimport GamesForm from './GamesForm.js'\r\n//import \"../App.css\";\r\n\r\nexport default function App(props) {\r\n    let [displayOutput, setDisplayOutput] = useState(false)\r\n    const [file, setFile] = useState()\r\n    const [csvArray, setCsvArray] = useState()\r\n\r\n    console.log(file)\r\n\r\n    useEffect(() => {\r\n      console.log('asdf')\r\n      const readFile = () => {\r\n        const csvFile = file\r\n        const reader = new FileReader()\r\n\r\n            reader.onload = function(e){\r\n                const text = e.target.result\r\n               // console.log(text)\r\n                setCsvArray(text)\r\n\r\n               \r\n            }\r\n          reader.readAsText(csvFile)\r\n      }\r\n      if(file && file.name !== null)\r\n        readFile()\r\n\r\n    }, [file])\r\n    console.log(props)\r\n    useEffect(() => {\r\n      const populateInput = () => {\r\n        const input = csvArray.split('\\n')\r\n        input.map( (item, index) => {\r\n          props.addGame()\r\n          console.log(index)\r\n          const info = item.split(' vs ').join(', ')\r\n          const test = info.split(',')\r\n\r\n            props.setWinnerInfo(test[0], index)\r\n            props.setLoserInfo(test[1].trimStart().trimEnd(), index)\r\n            props.setVenue(test[2].trimStart().trimEnd(), index)\r\n            props.setWinnerRuns(Number(test[4]), index)\r\n            props.setLoserRuns(Number(test[5]), index)\r\n\r\n        })\r\n      }\r\n\r\n      if(csvArray && csvArray.length !== 0)\r\n        populateInput()\r\n    }, [csvArray])\r\n\r\n    let initTeamState = props.addFranchise\r\n    useEffect(() => {\r\n        fetch(`https://api-mlb.herokuapp.com?season=2022`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                initTeamState(data)\r\n            })\r\n    }, [])\r\n\r\n    function handleDate(e) {\r\n        e.preventDefault()\r\n        props.setDate(e.target.value)\r\n    }\r\n\r\n    function formatDate() {\r\n        let [year, ...date] = props.Date.split('-')\r\n        date = date.join('-')\r\n        date = [date, '-', ...year].join('')\r\n        return date\r\n    }\r\n\r\n    let matchUpFunc = function (winner, loser) {\r\n        let opponent = 1\r\n        let isMatchInterLeague = (function () {\r\n            opponent = props.MLBTeams.filter(item => {\r\n                return item.team === winner || item.team === loser ? item : null\r\n            })\r\n            return checkLeague(opponent[0].league, opponent[1].league)\r\n        })()\r\n\r\n        function checkLeague(a, b) {\r\n            return a === b ? 0 : 1\r\n        }\r\n\r\n        function checkDivisionString(a, b) {\r\n            return a === b ? 1 : 0\r\n        }\r\n\r\n        function checkDivisionRivals() {\r\n            if (!isMatchInterLeague)\r\n                return checkDivisionString(opponent[0].division, opponent[1].division)\r\n            return 0\r\n        }\r\n\r\n        return [isMatchInterLeague, checkDivisionRivals]\r\n    }\r\n\r\n    function generateOutput() {\r\n        let output = props.Games.map((item, i) => {\r\n            if (item.winner === '' || item.loser === '') return null\r\n\r\n            let [printInterLeagueValue, printDivisionRivalValue] = matchUpFunc(\r\n                item.winner,\r\n                item.loser\r\n            )\r\n\r\n            return (\r\n                <Output key={i}>\r\n                    {item.winner} vs {item.loser}, {item.venue}, {formatDate()},&nbsp;\r\n                    {item.winnerRuns}, {item.loserRuns}, 0, {printDivisionRivalValue()},&nbsp;\r\n                    {printInterLeagueValue},\r\n                </Output>\r\n            )\r\n        })\r\n\r\n        return output\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                type=\"file\"\r\n                placeholder={'import'}\r\n                accept=\".csv\"\r\n                onChange={e => setFile(e.target.files[0])}\r\n            />\r\n            <input\r\n                required\r\n                type=\"text\"\r\n                placeholder={new Date().toISOString().split('T')[0]}\r\n                onFocus={e => (e.currentTarget.type = 'date')}\r\n                onBlur={e => (e.currentTarget.type = 'text')}\r\n                onChange={e => handleDate(e)}\r\n            ></input>\r\n            {props.Games.length === 0 ? (\r\n                <div> No game data </div>\r\n            ) : (\r\n                <GamesForm\r\n                    Games={props.Games}\r\n                    Teams={props.MLBTeams}\r\n                    setWinnerInfo={props.setWinnerInfo}\r\n                    setLoserInfo={props.setLoserInfo}\r\n                    setWinnerRuns={props.setWinnerRuns}\r\n                    setLoserRuns={props.setLoserRuns}\r\n                    setVenue={props.setVenue}\r\n                    removeGame={props.removeGame}\r\n                    swapMatchup={props.swapMatchup}\r\n                />\r\n            )}\r\n            <Button handleEvent={props.addGame}> Enter another game </Button>\r\n            <Button handleEvent={() => setDisplayOutput(!displayOutput)}>Toggle output</Button>\r\n            {displayOutput ? generateOutput() : () => props.getGames}\r\n        </div>\r\n    )\r\n}\r\n/*\r\n * let myvar = new Date()\r\n    console.log myvar\r\n    outputs: Fri Nov 05 2021 00:46:17 GMT-0400 (Eastern Daylight Time)\r\n\r\n    Date.parse(myvar)\r\n    outputs: 1636087577000\r\n\r\n    let holdms = Date.parse(myvar)\r\n\r\n    let correctedDate = holdms - (60000* myvar.getTimezoneOffset())\r\n\r\n    correctedDate = new Date(correctedDate)\r\n    outputs: Thu Nov 04 2021 20:46:17 GMT-0400 (Eastern Daylight Time)\r\n */\r\n","const defaultDate = new Date()\r\n\r\nexport const DateReducer = (state= {date: defaultDate.toISOString().split('T')[0]}, action) => {\r\n  switch(action.type){\r\n    case 'SET_DATE':\r\n      return Object.assign({}, {date: action.payload});\r\n    default: \r\n      return state;\r\n  }\r\n}","import {DateReducer} from './DateReducer.js' \r\nimport {GamesReducer} from './GamesReducer.js' \r\nimport {FranchiseReducer} from './FranchiseReducer.js' \r\nimport  {combineReducers}  from 'redux';\r\n\r\nexport const rootReducer = combineReducers({\r\n    FranchiseReducer,\r\n    GamesReducer,\r\n    DateReducer\r\n  })","export const FranchiseReducer = (state = [], action) => {\r\n    switch(action.type){\r\n      case 'ADD_FRANCHISE':\r\n        return [...action.payload]\r\n      default:\r\n        return state\r\n    }\r\n  }","export const GamesReducer = (state = [], action) => {\r\n    let games = state.slice()\r\n    switch(action.type){\r\n      case 'ADD_GAME':\r\n        return [...state, action.payload]\r\n      case 'REMOVE_GAME':\r\n        let copy1 = state.slice(0, action.index)\r\n        let copy2 = state.slice(action.index+1)\r\n        copy1 = copy1.concat(copy2)\r\n        return copy1\r\n      case 'SWAP_MATCHUP':\r\n        let tempHolder = games[action.index].winner\r\n        games[action.index].winner = games[action.index].loser\r\n        games[action.index].loser = tempHolder\r\n        return [...games]\r\n      case 'SET_WINNER_INFO':\r\n        games[action.index].winner = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_INFO':\r\n        games[action.index].loser = action.payload\r\n        return [...games]\r\n      case 'SET_WINNER_RUNS':\r\n        games[action.index].winnerRuns = action.payload\r\n        return [...games]\r\n      case 'SET_LOSER_RUNS':\r\n        games[action.index].loserRuns = action.payload\r\n        return [...games]\r\n      case 'SET_VENUE':\r\n        games[action.index].venue = action.payload\r\n        return [...games]\r\n      case 'GET_GAMES':\r\n        return state\r\n      default:\r\n        return state  \r\n    }\r\n  }","import './App.css';\r\nimport Main from './containers/Main.js';\r\nimport {HashRouter, Switch, Link, Route} from \"react-router-dom\";\r\nimport GamesContainer from './containers/GamesContainer.js';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport App2 from './App2';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport { rootReducer } from './reducers/RootReducer.js';\r\n\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename =\"/\">\r\n          <Navbar expand=\"xxl\" bg=\"light\">\r\n            <Navbar.Toggle/>\r\n            <Navbar.Collapse className=\"nav-collapse\">\r\n            <Nav>\r\n              <Nav.Link as = {Link} to = \"/\"> Standings </Nav.Link>\r\n              <Nav.Link as = {Link} to = \"/games\"> Final Scores </Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n            \r\n          </Navbar>\r\n        <Switch>\r\n          <Route exact path = \"/\">\r\n            <Main />\r\n          </Route>\r\n          <Route path = \"/games\">\r\n            <GamesContainer />\r\n          </Route>\r\n          <Route path = \"/admin\">\r\n            <Provider store={store}>\r\n              <App2 />\r\n            </Provider>\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}